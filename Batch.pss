Function BatchProcessFile()
	'========================================================================
	'Change the following query to generate a record set with counts and a unique batch name
	'The query could be further changed to display further information
	'========================================================================

	'Code sets variables
	sQuery 						= ""
	iNumberOfShipments 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")
	sDomesticShipMethod 		= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")
	sInternationalShipMethod	= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
	sProductCode 				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")
	sProductItemQty 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")
	sProductItemValue 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")
	sBatchName					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") 
	sResidentialFlag			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG")
	SDeparment					= Shipment.E("/SHIPMENT/CMS/CSTM_DEPARTMENT")
	sWorkstationID				= Shipment.E("/SHIPMENT/CMS/CSTM_WORKSTATIONID")
	
	'Code calls function that translates domestic ship method to valid proship ship method
	If sDomesticShipMethod <> "" Then
		sShipMethod = sDomesticShipMethod
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		sProShipDomesticShipMethod = sProShipShipmethod
	End If
	
	'Code calls function that translates international ship method to valid proship ship method
	If sInternationalShipMethod <> "" Then
		sShipMethod = sInternationalShipMethod
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		sProShipInternationalShipMethod = sProShipShipmethod
	End If
	
	'Code displays message to allow to cancel processing batch
	sWindowMessage = "You are about to process  " &  iNumberOfShipments & "  Shipments for Batch  " & sBatchName & Vbcrlf & vbCrlf &_
					   "Click YES to process batch." & vbCrlf & _
					   "Click NO  to exit batch process."
	sWindowButtons = vbQuestion+vbYesNo
	sWindowName = "Batch Shipment Count - Batch.BatchProcessFile"
	
	If vbNo = Msgbox(sWindowMessage,sWindowButtons,sWindowName) Then
		Set rsBatchInput = Nothing
		Exit Function
	End If
	
	Set rsBatchInput = Nothing
	strQuery  = ""
	B_Count   = CNum(iNumberofShipments)
	B_Current = 0
	
	'Show progress bar
	ProgressBar True,B_Current,0,B_Count,"Batch Processing","Shipping...", True
	
	sQuery = "SELECT PackageID, InvoiceID, CustomerID, CustomerName, CustomerContact, CustomerAddress1, " & _
			 "CustomerAddress2, CustomerAddress3, CustomerCity, CustomerState, CustomerZip, CustomerCountry, " & _
			 "CustomerPhone, CustomerShipMethod, InvoiceType, TotalSales, CustomerCharge, RecordType, " & _
			 "MiscText1, MiscText2, MiscText3, MiscText4, MiscText5, ProcessedFlag, ProcessedDate, ShipmentErrorMessage " & _
			 "FROM BatchInput " & _
			 "WHERE InvoiceID = '" & sBatchName & "' " & _
			 "And ProcessedFlag = 'N' " & _ 
			 "Order By PackageID" 

	SET rsBatchInput = pCN.Execute(sQuery)
	
    iCount = 1	
	rsBatchInput.MoveFirst
	
	For iCount = 1 To iNumberOfShipments
		   
		Cancelme = CancelMe + ProgressBar(True,B_Current)
		If CancelMe <> 0 Then 'If user presses cancel then stop
			ProgressBar False, 0
			Exit Function
		End If
	
		B_C_CO = ""
		B_C_COID = ""
		B_C_CT = ""
		B_C_CY = ""
		B_C_ST = ""
		B_C_ZP = ""
		B_C_PH = ""
		B_C_A1 = ""
		B_C_A2 = ""
		B_Proof = ""
		B_SHIP_ID = ""
		B_Weight = ""
		B_TotalWeight = ""
		B_C_Country = ""
		B_Terms = ""
		B_Interface = ""
		B_Employee_Count = ""
		B_ItemWeight = ""
		B_Name = ""
		B_InvoiceType = ""
		B_PSVoidID = ""
		sCommonNode = ""
		sPackageNode = ""
		sPrintRequest = ""
			
		
		'Load record set information into variables.  Additional input validation should occurs at this time
		B_SHIP_ID = Trim(rsBatchInput.Fields("Packageid") & "")
		B_C_COID = rsBatchInput.Fields("CustomerID").value 
		B_C_CO = rsBatchInput.Fields("CustomerName").value 
		B_C_CT = rsBatchInput.Fields("CustomerContact").value & ""
		B_C_A1 = rsBatchInput.Fields("CustomerAddress1").value & ""
		B_C_A2 = rsBatchInput.Fields("CustomerAddress2").value & ""
		B_C_CY = Trim(rsBatchInput.Fields("CustomerCity") & "")
		B_C_ST = Trim(rsBatchInput.Fields("CustomerState") & "")
		B_C_ZP = Left(rsBatchInput.Fields("CustomerZip") & "",5)
		B_C_PH = Trim(rsBatchInput.Fields("CustomerPhone") & "")
		B_C_Country = Trim(rsBatchInput.Fields("CustomerCountry") & "")
		B_Name = Trim(rsBatchInput.Fields("InvoiceID") & "")
		B_Service_Domestic = sProShipDomesticShipMethod      
		B_Service_International = sProShipInternationalShipMethod 
		B_Weight = Shipment.E("/SHIPMENT/PACKAGE[1]/WEIGHT")
		B_RefNo = B_SHIP_ID 
		B_Packaging= "CUSTOM"
		B_Date = Celse(s.e("SHIPMENT/COMMON/SHIPDATE"),"mm/dd/yyyy")
		B_ShipperID = Shipment.E("SHIPMENT/CMS/CSTM_USERNAME")
		B_WarehouseCode = Shipment.E("SHIPMENT/COMMON/SHIPPER")
		B_PSLRFormat = ""
		B_ItemWeight = rsBatchInput.Fields("MiscText2").value & ""
		B_InvoiceType = Trim(rsBatchInput.Fields("InvoiceType") & "")
		strPackageNode = ""
		strCommonNode = ""
		B_Terms = "SHIPPER"
		B_Interface = "A-BATCH"
		
		'Code sets service depending upon country code from batchinput table
		If B_C_Country = "US" _
			Or B_C_Country = " " Then
			B_Service = B_Service_Domestic
		Else
			B_Service = B_Service_International
		End If

		If Left(Trim(B_Service),12) = "BWTI_UPS.UPS" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "UPS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for USPS label
		ElseIf Left(Trim(B_Service),14) = "BWTI_USPS.USPS" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "USPS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for Endicia USPS label
		ElseIf Left(Trim(B_Service),8) = "ELS.USPS" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "USPS_IBI_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/DESTINATION"))
	
		'Shipping station label configuration for FedEx Express label	
		ElseIf Left(Trim(B_Service),14) = "BWTI_FXRS.FXRS" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/STOCK")) & "|"					  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for FedEx Ground label	
		ElseIf Left(Trim(B_Service),14) = "BWTI_FXRS.CAFE" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for MSI Standard Label	
		ElseIf Trim(B_Service) = "BWTI_LTL.LTL.MSISTANDARD" Then
			'Code gets ProShip printer setup from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/DESTINATION"))			
		End If
			
		'Build Common nodes for Proship
		sCommonNode = "<COMMON>" 
		sCommonNode = sCommonNode &	"<SHIPDATE>" & B_Date & "</SHIPDATE>" 
		sCommonNode = sCommonNode &	"<TERMS>" & B_Terms & "</TERMS>" 
		sCommonNode = sCommonNode &	"<SHIPPER_REFERENCE>" & B_RefNo & "</SHIPPER_REFERENCE>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_CODE>" & Trim(B_C_COID) & "</CONSIGNEE_CODE>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_COMPANY>" & Trim(B_C_CO) & "</CONSIGNEE_COMPANY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_CONTACT>" & Trim(B_C_CT) & "</CONSIGNEE_CONTACT>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS1>" & Trim(B_C_A1) & "</CONSIGNEE_ADDRESS1>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS2>" & Trim(B_C_A2) & "</CONSIGNEE_ADDRESS2>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_CITY>" & Trim(B_C_CY) & "</CONSIGNEE_CITY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_STATE>" & Trim(B_C_ST) & "</CONSIGNEE_STATE>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_POSTALCODE>" & Trim(B_C_ZP) & "</CONSIGNEE_POSTALCODE>" 
		sCommonNode = sCommonNode & "<CONSIGNEE_COUNTRY>" & B_C_Country & "</CONSIGNEE_COUNTRY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_PHONE>" & B_Phone & "</CONSIGNEE_PHONE>" 
		sCommonNode = sCommonNode &	"<SHIPPERID>" & B_ShipperID & "</SHIPPERID>" 
		sCommonNode = sCommonNode &	"<SHIPPER>" & B_WarehouseCode & "</SHIPPER>" 
		
		'Code populates residential flag in proship if set on
		If UCase(sResidentialFlag) = "Y" Then
			sCommonNode = sCommonNode &	"<CONSIGNEE_RESIDENTIAL>True</CONSIGNEE_RESIDENTIAL>"
		End If
		
		sCommonNode = sCommonNode &	"<PSLR_FORMAT_CODE>" & B_PSLRFormat & "</PSLR_FORMAT_CODE>" 
		sCommonNode = sCommonNode &	B_L_Req
		sCommonNode = sCommonNode &	"</COMMON>"	

		'Build Package nodes for Proship
		For i = 1 To 1
			sPackageNode = sPackageNode & "<PACKAGE>"
			sPackageNode = sPackageNode & "<PACKAGING>" & B_Packaging & "</PACKAGING>"
			sPackageNode = sPackageNode & "<WEIGHT>" & B_Weight & "</WEIGHT>"
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
			
			If Left(Trim(B_Service),8) = "ELS.USPS" Then
				sPackageNode = sPackageNode & "<PROOF>True</PROOF>"
			End If
			
			sPackageNode = sPackageNode & "</PACKAGE>" 
		Next
						 
		'Build The XML for Proship server
		SS = "<SHIPMENT ACTION=""SHIP"">" & _ 
				sCommonNode & _
				sPackageNode & _
				"<SERVICE>" & B_Service & "</SERVICE>" & _
			 "</SHIPMENT>"
		
		saveAsFile SS, "C:\Input.XML"
		
		'update progress bar - if a lock up occurs it can be isolated to here
		sMessage = "(Sending  " & B_RefNo & "  XML to Server)" 
		Cancelme = CancelMe + ProgressBar(True,B_Current ,,B_Count,, sMessage)
		
		'Send XML to Proship server
		SR = ServerQuery(SS)
			
		'Check for success
		If Instr(1,SR,"<ERROR>") > 0 Then
			'********************************
			'Change the following query to save any error and modify a flag signifying a failed shipment
			'********************************
			'update progress bar - if a lock up occurs it can be isolated to here
			sMessage = "(Updating  " & B_RefNo & "  as Bad Shipment)" 
			Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
			
			sErrorMessage = CTrim(SR,4000)
			
			sQueryUpdate = "Update BatchInput Set ProcessedFlag = '2', ShipmentErrorMessage = '" & sErrorMessage & "' " & _
						   "Where PAckageID = '" & B_RefNo & "'"

			On Error Resume Next
			Set rsBatchInputUpdate = pCN.Execute(sQueryUpdate)
			
			If Err.Number <> 0 _
				Or Err.Description <> "" Then
				'Code displays error number and error description if error when reading CSTM(Warehouse) database
				sWindowMessage = "Received Error Updating Shipment  " & UCASE(B_RefNo) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
						   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
						   "Shipment " & UCASE(B_RefNo) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
						   "Please Report Problem to IT Department"
				sWindowName = "Batch.BatchProcessFile"
				sWindowButtons = vbCritical + vbOkOnly
				MsgBox sWindowMessage,sWindowButtons,sWindowName
			End If

			BadCount = BadCount + 1

		Else
			'Put result into a DOMDocument for easier querying	
			Set X = CreateObject("MSXML2.DOMDocument")
			If X.loadXML(SR) Then 
				saveAsFile SR, "C:\Output.XML"
				PeriodLocation = InstrRev(B_Service,".")
				FieldLength = Len(Trim(B_Service))
				B_ServiceBack = Mid(B_Service,1,PeriodLocation - 1)
				
				'update progress bar - if a lock up occurs it can be isolated to here
				sMessage = "(Printing Label for  " & B_RefNo & "  )" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				For i = 1 To 1
					'Get Label Image
					Select Case Trim(B_ServiceBack)
						Case "BWTI_DHL.DHL"
							'sLabel = GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & CStr(i) & "]/DHL_LABEL")
							sLabel = X.SelectSingleNode("//DHL_LABEL").text
							pData1 = B64_Decode(sLabel)
							sLabel = pData1
							CDBID = B_TrackNo
						Case "BWTI_FXRS.FXRS","BWTI_FXRS.CAFE"
							'sLabel = GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & CStr(i) & "]/FXRS_LABEL")
							sLabel = X.SelectSingleNode("//FXRS_LABEL").text
							pData1 = B64_Decode(sLabel)
							sLabel = pData1
							CDBID = B_TrackNo
						Case "BWTI_UPS.UPS","BWTI_UPS.MI"
							'sLabel = GetNodeValue(X, "/SHIPMENT/PACKAGE[" & CStr(i) & "]/UPS_LABEL")
							sLabel = X.SelectSingleNode("//UPS_LABEL").text
							pData1 = B64_Decode(sLabel)
							sLabel = pData1
							CDBID = B_TrackNo
						Case "BWTI_USPS.USPS"
							'sLabel = GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & CStr(i) & "]/USPS_LABEL")
							sLabel = X.SelectSingleNode("//USPS_LABEL").text
							pData1 = B64_Decode(sLabel)
							sLabel = pData1
							CDBID = B_TrackNo
						Case "ELS.USPS"
							'sLabel = GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & CStr(i) & "]/USPS_LABEL")
							sLabel = X.SelectSingleNode("//USPS_IBI_LABEL").text
							pData1 = B64_Decode(sLabel)
							sLabel = pData1
							CDBID = B_TrackNo							
							
					End Select
					'********************************
					'Print the label
					'Modify following if printing label now. If saving label for printing later do nothing to the following line
					sDestPrinter = B_DestPrinter
					
					'Code decides how to send label/document to printer setup in proship client
					Select Case UCase(Left(sDestPrinter,2))
						Case "WP"
							'Code sends carrier label to windows printer setup at shipping station
							sError = SendToWinPrinter (Mid(sBatchDestinationPrinter,5,20), sLabel)
							SaveAsfile sError,"C:\errormessage.txt"
							
						Case "\\", "LP"
							'Code sends carrier label local printer, shared, network printer
							SaveAsFile sLabel,sDestPrinter
					End Select
					
					'SaveAsFile sLabel,sDestPrinter
					Pause 1.50
					intPackage = i
					B_NumberOfBoxes = 1
					'Call UpdateBatchHistory(SR, B_Weight, B_TotalWeight, B_NumberOfBoxes, intPackage)
					'*************************************
					'update progress bar - if a lock up occurs it can be isolated to here
					sMessage = "(Updating  " & B_RefNo & "  as Good Shipment)" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
					
					sProcessed = Celse(Now,"yyyy-mm-dd")
					
					sQueryUpdate = "Update BatchInput Set ProcessedFlag = 'Y', ProcessedDate = '" & sProcessed & "' " & _
								   "Where PAckageID = '" & B_RefNo & "'"

					On Error Resume Next
					Set rsBatchInputUpdate = pCN.Execute(sQueryUpdate)
					
					If Err.Number <> 0 _
						Or Err.Description <> "" Then
						'Code displays error number and error description if error when reading CSTM(Warehouse) database
						sWindowMessage = "Received Error Updating Shipment  " & UCASE(B_RefNo) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
								   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
								   "Shipment " & UCASE(B_RefNo) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
								   "Please Report Problem to IT Department"
						sWindowName = "Batch.BatchProcessFile"
						sWindowButtons = vbCritical + vbOkOnly
						MsgBox sWindowMessage,sWindowButtons,sWindowName
					End If
					
					'Code insert each package into CSTM(History)
					CurrentShipper = B_WarehouseCode
					OriginZip = ""
					Call FindOriginZip (CurrentShipper, OriginZip)
					
					'Code calls function to parse out carrier and service from Proship service field.
					ProShipCarrier = B_Service
					Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)	

					'Code coverts ProShip Carrier FXRS and CAFE to FEDEX in CSTM(History) Table.
					If UCase(Trim(CarrierName)) = "FXRS" _
						Or UCase(Trim(CarrierName)) = "CAFE" Then
						CarrierName = "FEDEX"
					End If
					
					'Code calls function that formats date & time into correct format for ship date
					PackageShipmentDate = CElse(B_date,"yyyy-mm-dd")
					Call FormatShipmentDateTime(PackageShipmentDate, PackageShipmentDateTime)
						
					'Code calls function that formats date & time into correct format for manifest date
					PackageManifestDate = CElse(B_Date,"yyyy-mm-dd")
					Call FormatManifestDateTime(PackageManifestDate, PackageManifestDateTime)
					
					Query = "Insert into history set "

					myField = B_Ship_ID
					call fixfield(myField)
					Query = Query & "PackageId= '" & myField & "', "   'PackageID 

					myField = B_Name
					call fixfield(myField)
					Query = Query & "Invoicenumber= '" & myField & "', "		'Invoice Number

					Query = Query & "OriginZip = '" & OriginZip & "', "	
					Query = Query & "OriginCompany = '" & GetNodeValue(SR, "/SHIPMENT/COMMON/RETURN_ADDRESS_COMPANY") & "', "
					Query = Query & "Shipper = '" & B_WarehouseCode & "', "	
					Query = Query & "ConsigneeNumber = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/COMMON/CONSIGNEE_CODE"),50) & "',"   	
					Query = Query & "ConsigneeCompany = '" & Trim(B_C_CO) & "',"  
					Query = Query & "ConsigneeContact = '" & Trim(B_C_CT) & "'," 		
					Query = Query & "ConsigneeAddress1= '" & Trim(B_C_A1) & "',"  
					Query = Query & "ConsigneeAddress2= '" & Trim(B_C_A2) & "'," 
					'Query = Query & "ConsigneeAddress3= '" & CTrim(strShipToAddress3,50) & "',"  
					Query = Query & "ConsigneeCity = '" & Trim(B_C_CY) & "',"   
					Query = Query & "ConsigneeState = '" & B_C_ST & "',"   
					Query = Query & "ConsigneeZip = '" & B_C_ZP & "',"   
	
					myField = B_C_PH
					call fixfield(myField)
					Query = Query & "ConsigneePhone = '" & myField & "',"   
					
					Query = Query & "CountryCode = '" & B_C_Country  & "', "	
					'Query = Query & "ConsigneeBillTo = ' ', "  
					Query = Query & "ProshipCarrier ='" & ProShipCarrier & "', "   
					'Query = Query & "CustomerShipMethodIn = '" & Trim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_IN")) & "', "  
					'Query = Query & "CustomerShipMethodOut ='" & Trim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")) & "', "	
					Query = Query & "Carrier ='" & CTrim(Carriername,25)  & "', "	
					Query = Query & "Class ='" & CTrim(CarrierService,30)  & "', "		
					'Query = Query & "Operator =  '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_SHIPPERID"),20) & "',"  
					'Query = Query & "Picker = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PICKER"),20) & "',"   
					'Query = Query & "Packer = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PACKER"),20) & "',"  

					If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
						Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
						B_PSVoidID = "BLTL." & B_Ship_ID
						Query = Query & "PSVoidID = '" & B_PSVoidID & "', "  
					Else
						Query = Query & "PSVoidID =  '" & X.SelectSingleNode("//PS_VOID_ID").text & "', "	
					End If
					
					Query = Query & "MAXBOX = " & B_NumberOfBoxes & ", "
					Query = Query & "CURBOX =  " & intPackage & ", "
					Query = Query & "Residential = '" & Trim(sResidentialFlag)  & "', "	
					
					If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
						Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
						Query = Query & "Zone = '', "  
					Else
						Query = Query & "Zone = '" & X.SelectSingleNode("//ZONE").text & "', "	
					End If
					
					Query = Query & "BilledWeight = " & CNum(X.SelectSingleNode("//RATED_WEIGHT").text) & ", "	
					Query = Query & "ActualWeight = " & CNum(B_Weight) & ", "

					If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
						Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
						Query = Query & "TrackingNumber = '" & B_Ship_ID & "', "  
					Else
						Query = Query & "TrackingNumber = '" & X.SelectSingleNode("//TRACKING_NUMBER").text & "', " 
					End If
					
					Query = Query & "ShipDate = '" & PackageShipmentDateTime & "', " 
					Query = Query & "ManifestDate = '" & PackageManifestDateTime	& "', "	
					
					If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
						Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
						Query = Query & "FuelSurchrge = '0.00', "  
					Else
						Query = Query & "FuelSurcharge = " & CNum(X.SelectSingleNode("//FUEL_SURCHARGE").text) & ", " 
					End If
					
					Query = Query & "BaseCharge = " & CNum(X.SelectSingleNode("//BASE").text) & ", "
					'Query = Query & "CodAmount = " & CNum(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage  & "]/COD_AMOUNT")) & ", " 
					'Query = Query & "CodFee = " & CNum(GetNodeValue(SR, "/SHIPMENT/COMMON/COD_FEE")) & ", "  
					'Query = Query & "CODPaymentMethod = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage & "]/COD_PAYMENT_METHOD"),50) & "', "
					Query = Query & "TotalCharge  = " & CNum(X.SelectSingleNode("//TOTAL").text) & ", "	
						
					myField = B_Ship_ID
					call fixfield(myField)
					Query = Query & "PLDReference1 = '" & myField & "', "	
					
					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_COMPANY"),40)
					REM call fixfield(myField)
					REM Query = Query & "TPBCompany = '" & myField & "', "	

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CONTACT"), 40)
					REM call fixfield(myField)
					REM Query = Query & "TPBContact = '" & myField & "', "	

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS1"), 40)
					REM call fixfield(myField)
					REM Query = Query & "TPBAddress = '" & myField & "', "		

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS2"), 40)
					REM call fixfield(myField)
					REM Query = Query & "TPBAddress2 = '" & myField & "', "					

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CITY"),25)
					REM call fixfield(myField)
					REM Query = Query & "TPBCity = '" & myField & "', "		

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_STATE"), 20)
					REM call fixfield(myField)
					REM Query = Query & "TPBState = '" & myField  & "', "			

					REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_POSTALCODE"), 20)
					REM call fixfield(myField)
					REM Query = Query & "TPBZip = '" & myField & "', "	
					
					myField = sDepartment
					call fixfield(myField)
					Query = Query & "Department = '" & myField & "', "

					Query = Query & "PackageType = '" & B_Packaging & "', "	
					Query = Query & "PaymentType =  '" & B_Terms & "', "
					Query = Query & "Interface = '" & B_Interface & "', "
					
					Query = Query & "UserText1 = '" & sWorkstationID & "', "	
					Query = Query & "UserText2 = '', "
					Query = Query & "UserText3 = '" & B_InvoiceType & "', "
					Query = Query & "UserText4 = '', "
					Query = Query & "UserText5 = '', "
					Query = Query & "UserNumber3 = '0.00', "
					Query = Query & "UserNumber4 = '0.00', "
					Query = Query & "UserNumber5 = '0.00' "

					On Error Resume Next
					Set rsHistory = pCN.Execute(Query,RecordsAffected)	

					If Err.Number <> 0 Then
						'Code displays error number and error description if error when creating datbase
						strErrorMessage = Err.Number & "  " & Err.Description 
						strWindowName = "Batch.BatchProcessFile"
						strWindowButtons = vbCritical + vbOkOnly
						MsgBox strErrorMessage,strWindowButtons,strWindowName
						
						'OkToContinue = False
						'exit Function
					End If			
				Next	
				Else
					'The result returned was not XML - this should  not happen 
					msgbox "Response not XML!",16,"Panic, Panic, Panic"
				End If
			End If
			B_Current = B_Current + 1
			rsBatchInput.MoveNext
		Next	
		'Clean up
		ProgressBar False, 0
		Set rsBatchInput = Nothing
	
End Function


Function BatchDisplayBatchFiles(OkToContinue)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to decide how many shipments
	' to process from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 		  = ""
	sResponse 	  = ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")	= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") 					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG")			= ""	
	
	sQuery = "SELECT COUNT(1), InvoiceID FROM BatchInput " & _
	         "Where InvoiceID <> ' ' " & _
			 "And ProcessedFlag = 'N' " & _
			 "Or ProcessedFlag = '2' " & _
		     "GROUP BY InvoiceID "

	Set rsBatchInputFile = pCN.Execute(sQuery)
	
	'Code builds list of future shipment days
	Do While Not rsBatchInputFile.EOF
	
		DaList = DaList & space(25) & _
				 rsBatchInputFile.Fields(1) & " (" & rsBatchInputFile.Fields(0) & " Packages)|"

		rsBatchInputFile.MoveNext
	Loop
	
	'Code closes record set
	rsBatchInputFile.Close
	
	'Code displays error message if no future shipments found
	If Len(DaList) = 0 Then
		sWindowMessage 	= "There are no Batch Shipments to Process"
		sWindowName 	= "No Shipments Found - BatchCustomerDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		OkToContinue = False
		Exit Function
	End If
	
	'Code trims the last | off
	DaList = Left(DaList, Len(DaList)-1)
	
	'Code display the list and get a result
	sResponse = Ask_List(DaList,"Select Batch File for Processing",6000,"|",True,0,25)
	
	'Code exits function if operator doesn't pick a future shipment date
	If sResponse = "" Then 
		sWindowMessage 	= "Operation cancelled by operator."
		sWindowName 	= "No Selection was made - BatchDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		OkToContinue = False
		Exit Function
	End If
	
	'Code finds "(" contained in response from daList.
	sCharacterLocation = Instr(1,sResponse,"(")

	'Code checks to see if "(" exists in response
	If sCharacterLocation > 0 Then
		'Code extracts shipments left to process
		iPackageCount = Mid(sResponse, sCharacterLocation + 1,12)
		iPackageCount = CNum(iPackageCount)
		'Code extracts batch name from daList Response
		sResponse = Trim(Mid(sResponse,1,sCharacterLocation - 1))
	End If
	
	'Code stores batch name to process
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = sResponse
		   
	'Code calls function to build domestic and international ship-via combo-box
	Call BatchBuildShipMethodComboBox()
	
	'Code per-populates number of shipment to process with total records left in CSTM(BatchInput)
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS") = iPackageCount 
	
	'Code per-populates department field for batch process
	Shipment.E("SHIPMENT/CMS/CSTM_DEPARTMENT") = "SALES"

	'Code sets default setting to batch residential flag
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG")	= "Y"
	
	'Code displays screen to fill out how they need to process batch file.
	ShowForm "BATCH",True,True
	
	'Reads scale to get weight of box
	B_Weight = Shipment.Weigh 
	If CNum(B_Weight) > 0 then
		s.e("SHIPMENT/PACKAGE[1]/WEIGHT") = B_Weight
	Else
		MsgBox "Please put Package on Scale and Press Enter Key", vbExclamation + vbOkOnly, "Batch - Scale Error" 
		'This code gets weight from scale.
		B_WEIGHT = Shipment.Weigh 
	
		If CNum(B_Weight) > 0 then
			s.e("SHIPMENT/PACKAGE[1]/WEIGHT") = B_Weight
		Else
			MsgBox "There was no weight on scale. Please check scale and re-start batch",48,"Scale Error"
			OkToContinue = False
			Exit Function
		End If
	End If
	
End Function


Function BatchBuildShipMethodComboBox()
	'========================================================================
	' This function reads through table ShipVa and creates a combo box for
	' screen field Domestic and international ship methods.
	'========================================================================
	
	'Code sets variables
	sQuery 					= ""
	sShipMethodCode 		= ""
	sShipMethodDescription 	= ""
	Cnt						= 1
	
	
	'Remove any old batch domestic ship method lists, if they exist
	Set N = SYS.DD.SelectSingleNode("/SYSTEM/CSTM_BATCH_DOMESTIC_SHIPMETHOD")
	If Not N is Nothing then N.parentnode.removechild(N)
	
	'Remove any old batch international ship method lists, if they exist
	Set N = SYS.DD.SelectSingleNode("/SYSTEM/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
	If Not N is Nothing then N.parentnode.removechild(N)
	 
	'Code builds query
	sQuery = "SELECT CustomerShipMethod, ProShipDescription " & _
			 "FROM ShipVia " & _
			 "ORDER BY CustomerShipMethod"
		
	On Error Resume Next		
	SET rsShipVia = pCN.Execute(sQuery)
	
	'Code displays error message with problem reading cstm(shipvia) table
	If Err.Number <> 0 _
		Or Err.Description <> ""Then
		strWindowMessage = "Received error reading CSTM(ShipVia) Table" & vbCrLf & vbCrlf & _
						   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
						   "Please Report Problem to Support Department"
		strWindowTitle   = "Error Reading ShipVia - BatchBuildShipMethodComboBox"
		MsgBox strWindowMessage,vbCritical + vbOkOnly,strWindowTitle

		'Code calls function that logs information in Database CSTM table Transactionlog
		strText = Err.Number & " - " & Err.Description & vbCrlf & strOutputFileData
		strPackageID  = "BATCH"
		strFunctionname = "BatchBuildShipMethodComboBox"
		strMessage = "Error Reading ShipVia"
		strMessage = Replace(strMessage, "\", "\\")
		Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
	
		Exit Function
	End If
	
	'Now loop and populate a new child node
	Do While Not rsShipVia.EOF
	
		sShipMethodCode 		= Trim(rsShipVia.Fields("CustomerShipMethod")) & Space(02)
		sShipmethodDescription 	= Space(02) & Trim(rsShipVia.Fields("ProShipDescription"))
		
		SYS.E("/SYSTEM/CSTM_BATCH_DOMESTIC_SHIPMETHOD[" & cnt & "]/PLAINTEXT") = sShipMethodDescription 
		SYS.E("/SYSTEM/CSTM_BATCH_DOMESTIC_SHIPMETHOD[" & cnt & "]/SYMBOL") = sShipMethodCode
		
		SYS.E("/SYSTEM/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD[" & cnt & "]/PLAINTEXT") = sShipMethodDescription 
		SYS.E("/SYSTEM/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD[" & cnt & "]/SYMBOL") = sShipMethodCode
		
		Cnt = Cnt + 1
		rsShipVia.MoveNext
	Loop
	
	'Code empties record-set
	Set rsShipVia = Nothing
	
End Function


Function BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
	'======================================================================
	' This function reads through cstm(shipvia) table to find proship ship method
	'======================================================================
	
	'Code sets variables
	sQuery = ""
		
	sQuery = "SELECT CustomerShipMethod, ProShipShipMethod, ProShipDescription, " & _
			"PaymentType, CODFlag, ResidentialFlag, SaturdayDeliveryFlag, SCAC " & _
			"FROM ShipVia " & _
			"WHERE CustomerShipMethod = '" & sShipMethod & "'"
	
	On Error Resume Next	
	Set rsShipVia = pCN.Execute(sQuery)
	
	'Code displays error message with problem reading cstm(shipvia) table
	If Err.Number <> 0 _
		Or Err.Description <> ""Then
		strWindowMessage = "Received error reading CSTM(ShipVia) Table" & vbCrLf & vbCrlf & _
						   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
						   "Please Report Problem to Support Department"
		strWindowTitle   = "Error Reading ShipVia - BatchReadShipViaTable"
		MsgBox strWindowMessage,vbCritical + vbOkOnly,strWindowTitle

		'Code calls function that logs information in Database CSTM table Transactionlog
		strText = Err.Number & " - " & Err.Description & vbCrlf & strOutputFileData
		strPackageID  = "BATCH"
		strFunctionname = "BatchReadShipViaTable"
		strMessage = "Error Reading ShipVia"
		strMessage = Replace(strMessage, "\", "\\")
		Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
	
		Exit Function
	End If

	If rsShipVia.eof Then
		'Code displays error message if record not found.
		strErrorMessage = "Customer Ship Method (" & ShipMethod & ") Not Found in CSTM(ShipVia) Table."
		strWindowName = "No Record Found - User_Scripts.TranslateShipMethod"
		strWindowButtons = vbCritical + vbOkOnly
		MsgBox strErrorMessage,strWindowButtons,strWindowName
	Else 		
		'MsgBox rsShipVia.Fields("ProShipShipMethod").value 
		sProShipShipMethod = rsShipVia.Fields("ProShipShipMethod").value & "" 
		sProShipShipMethodDescription = Trim(rsShipVia.Fields("ProShipDescription").value) & ""
	End If
	
	'Code empties RecordSet
	Set rsShipVia = Nothing
	
End Function


Function BatchProcessNonRated()
	'========================================================================
	'Change the following query to generate a record set with counts and a unique batch name
	'The query could be further changed to display further information
	'========================================================================
	
	'Code sets variables
	sQuery 						= ""
	iNumberOfShipments 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")
	sDomesticShipMethod 		= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")
	sInternationalShipMethod	= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
	sProductCode 				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")
	sProductItemQty 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")
	sProductItemValue 			= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")
	sBatchName					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") 
	
	'Code calls function that translates domestic ship method to valid proship ship method
	sShipMethod = sDomesticShipMethod
	Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
	sProShipDomesticShipMethod = sProShipShipmethod
	
	'Code calls function that translates international ship method to valid proship ship method
	sShipMethod = sInternationalShipMethod
	Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
	sProShipInternationalShipMethod = sProShipShipmethod
	
	'Code displays message to allow to cancel processing batch
	sWindowMessage = "You are about to process  " &  iNumberOfShipments & "  Shipments for Batch  " & sBatchName & Vbcrlf & vbCrlf &_
					   "Click YES to process batch." & vbCrlf & _
					   "Click NO  to exit batch process."
	sWindowButtons = vbQuestion+vbYesNo
	sWindowName = "Batch Shipment Count - Batch.BatchProcessFile"
	
	If vbNo = Msgbox(sWindowMessage,sWindowButtons,sWindowName) Then
		Set rsBatchInput = Nothing
		Exit Function
	End If
	
	Set rsBatchInput = Nothing
	strQuery  = ""
	B_Count   = CNum(iNumberofShipments)
	B_Current = 0
	BadCount  = 0
	
	'Show progress bar
	ProgressBar True,B_Current,0,B_Count,"Batch Processing","Shipping...", True
	
	sQuery = "SELECT PackageID, InvoiceID, CustomerID, CustomerName, CustomerContact, CustomerAddress1, " & _
			 "CustomerAddress2, CustomerAddress3, CustomerCity, CustomerState, CustomerZip, CustomerCountry, " & _
			 "CustomerPhone, CustomerShipMethod, InvoiceType, TotalSales, CustomerCharge, RecordType, " & _
			 "MiscText1, MiscText2, MiscText3, MiscText4, MiscText5, ProcessedFlag, ProcessedDate, ShipmentErrorMessage " & _
			 "FROM BatchInput " & _
			 "WHERE InvoiceID = '" & sBatchName & "' " & _
			 "And ProcessedFlag = 'N' " & _ 
			 "Order By PackageID" 

	SET rsBatchInput = pCN.Execute(sQuery)
	
	rsBatchInput.MoveFirst
	
	For iCount = 1 To iNumberOfShipments Step 1

		Cancelme = CancelMe + ProgressBar(True,B_Current)
		If CancelMe <> 0 Then 'If user presses cancel then stop
			ProgressBar False, 0
			Exit Function
		End If
	
		B_C_CO = ""
		B_C_CT = ""
		B_C_CY = ""
		B_C_ST = ""
		B_C_ZP = ""
		B_C_PH = ""
		B_C_A1 = ""
		B_C_A2 = ""
		B_Proof = ""
		B_SHIP_ID = ""
		B_Weight = ""
		B_TotalWeight = ""
		B_C_Country = ""
		B_Terms = ""
		B_Interface = ""
		B_Employee_Count = ""
		B_ItemWeight = ""
		B_Name = ""
		B_InvoiceType = ""
		B_PSVoidID = ""
		iBaseCost  = 0.00
		iTotalCost = 0.00
			
		
		'Load record set information into variables.  Additional input validation should occur at this time
		B_SHIP_ID = Trim(rsBatchInput.Fields("Packageid") & "")
		B_C_CO = rsBatchInput.Fields("CustomerName").value 
		B_C_CT = rsBatchInput.Fields("CustomerContact").value & ""
		B_C_A1 = rsBatchInput.Fields("CustomerAddress1").value & ""
		B_C_A2 = rsBatchInput.Fields("CustomerAddress2").value & ""
		B_C_CY = Trim(rsBatchInput.Fields("CustomerCity") & "")
		B_C_ST = Trim(rsBatchInput.Fields("CustomerState") & "")
		B_C_ZP = Left(rsBatchInput.Fields("CustomerZip") & "",5)
		B_C_PH = Trim(rsBatchInput.Fields("CustomerPhone") & "")
		B_C_Country = Trim(rsBatchInput.Fields("CustomerCountry") & "")
		B_Name = Trim(rsBatchInput.Fields("InvoiceID") & "")
		B_Service_Domestic = sProShipDomesticShipMethod      
		B_Service_International = sProShipInternationalShipMethod 
		B_Weight = (Shipment.E("/SHIPMENT/PACKAGE[1]/WEIGHT"))
		B_RefNo = B_SHIP_ID 
		B_Packaging= "CUSTOM"
		B_Date = Celse(s.e("SHIPMENT/COMMON/SHIPDATE"),"mm/dd/yyyy")
		B_ShipperID = Shipment.E("SHIPMENT/CMS/CSTM_USERNAME")
		B_WarehouseCode = Shipment.E("SHIPMENT/COMMON/SHIPPER")
		B_PSLRFormat = ""
		B_ItemWeight = rsBatchInput.Fields("MiscText2").value & ""
		B_InvoiceType = Trim(rsBatchInput.Fields("InvoiceType") & "")
		strPackageNode = ""
		strCommonNode = ""
		B_Terms = "SHIPPER"
		B_Interface = "A-BATCH"
		sCommonNode = ""
		sPackageNode = ""
		sPrintRequest = ""
		
		'Code sets service depending upon country code from batchinput table
		If B_C_Country = "US" _
			Or B_C_Country = " " Then
			B_Service = B_Service_Domestic
		Else
			B_Service = B_Service_International
		End If
		
		If Trim(B_Service) = "BWTI_LTL.LTL.MSISTANDARD" _
			And B_C_Country = "US" Then	
			'Code figures charges fir MSI Standard domestic shipments
			iWeight = Cnum(Shipment.E("/SHIPMENT/PACKAGE/WEIGHT"))
			iOunces = Cnum(iWeight) * 16
			iWholeOunces = Round(iOunces,0)
			
			If iWholeOunces = 8 Then
				iBaseCost  = 1.38
				iTotalCost = 1.38
			ElseIf iWholeOunces = 9 Then
				iBaseCost  = 1.47
				iTotalCost = 1.47
			ElseIf iWholeOunces = 10 Then
				iBaseCost  = 1.57
				iTotalCost = 1.57
			ElseIf iWholeOunces = 11 Then
				iBaseCost  = 1.65
				iTotalCost = 1.65
			ElseIf iWholeOunces = 12 Then
				iBaseCost  = 1.74
				iTotalCost = 1.74
			ElseIf iWholeOunces = 13 Then
				iBaseCost  = 1.83
				iTotalCost = 1.83
			End If
			
		ElseIf Trim(B_Service) = "BWTI_LTL.LTL.MSISTANDARD" _
			And B_C_Country <> "US" Then	
			'Code figures charges for MSI Standard international shipments
			iShipmentWeight = Cnum(Shipment.E("/SHIPMENT/PACKAGE/WEIGHT"))
			Call CalculateMSIStandardRates(iShipmentWeight, strPackageCharge)
			iBaseCost  = strPackageCharge
			iTotalCost = strPackageCharge
		End If
		
		If Left(Trim(B_Service),12) = "BWTI_UPS.UPS" Then
			'Code gets ProShip printer set-up from client station 
			B_PSLRFormat = "UPS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for USPS label
		ElseIf Left(Trim(B_Service),14) = "BWTI_USPS.USPS" Then
			'Code gets ProShip printer set-up from client station 
			B_PSLRFormat = "USPS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/DESTINATION"))
	
		'Shipping station label configuration for FedEx Express label	
		ElseIf Left(Trim(B_Service),14) = "BWTI_FXRS.FXRS" Then
			'Code gets ProShip printer set-up from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/STOCK")) & "|"					  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for FedEx Ground label	
		ElseIf Left(Trim(B_Service),14) = "BWTI_FXRS.CAFE" Then
			'Code gets ProShip printer set-up from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/STOCK")) & "|"		  
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/DESTINATION"))
			
		'Shipping station label configuration for MSI Standard Label	
		ElseIf Trim(B_Service) = "BWTI_LTL.LTL.MSISTANDARD" Then
			'Code gets ProShip printer set-up from client station 
			B_PSLRFormat = "FXRS_LABEL|" & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_MSI_STANDARD_LABEL/PRINTER")) & "|" _
				& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_MSI_STANDARD_LABEL/STOCK")) & "|"
			B_PrinterType  = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_MSI_STANDARD_LABEL/PRINTER"))
			B_PrinterStock = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_MSI_STANDARD_LABEL/STOCK"))
			B_DestPrinter = Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_MSI_STANDARD_LABEL/DESTINATION"))
			B_CarrierDocument = "PLPI_MSI_STANDARD_LABEL"
			B_Server = "BWTI_LTL.LTL"
		End If
			
		'Build Common nodes for Proship
		sCommonNode = "<COMMON>" 
		sCommonNode = sCommonNode &	"<SHIPDATE>" & B_Date & "</SHIPDATE>" 
		sCommonNode = sCommonNode &	"<TERMS>" & B_Terms & "</TERMS>" 
		sCommonNode = sCommonNode &	"<SHIPPER_REFERENCE>" & B_RefNo & "</SHIPPER_REFERENCE>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_COMPANY>" & CTrim(B_C_CO,40) & "</CONSIGNEE_COMPANY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_CONTACT>" & CTrim(B_C_CT,40) & "</CONSIGNEE_CONTACT>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS1>" & CTrim(B_C_A1,40) & "</CONSIGNEE_ADDRESS1>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS2>" & CTrim(B_C_A2,40) & "</CONSIGNEE_ADDRESS2>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_CITY>" & CTrim(B_C_CY,40) & "</CONSIGNEE_CITY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_STATE>" & CTrim(B_C_ST,40) & "</CONSIGNEE_STATE>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_POSTALCODE>" & CTrim(B_C_ZP,40) & "</CONSIGNEE_POSTALCODE>" 
		sCommonNode = sCommonNode & "<CONSIGNEE_COUNTRY>" & B_C_Country & "</CONSIGNEE_COUNTRY>" 
		sCommonNode = sCommonNode &	"<CONSIGNEE_PHONE>" & B_Phone & "</CONSIGNEE_PHONE>" 
		sCommonNode = sCommonNode &	"<SHIPPERID>" & B_ShipperID & "</SHIPPERID>" 
		sCommonNode = sCommonNode &	"<SHIPPER>" & B_WarehouseCode & "</SHIPPER>" 
		sCommonNode = sCommonNode &	"</COMMON>"	

		'Build Package nodes for Proship
		For i = 1 To 1
			sPackageNode = sPackageNode & "<PACKAGE>"
			sPackageNode = sPackageNode & "<PACKAGING>" & B_Packaging & "</PACKAGING>"
			sPackageNode = sPackageNode & "<WEIGHT>" & iWeight & "</WEIGHT>"
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
			sPackageNode = sPackageNode & "</PACKAGE>" 
		Next
						 
		'Build The XML for Proship server
		sPrintRequest = "<PRINT>"
		sPrintRequest = sPrintRequest & "<DOCUMENT>" & B_CarrierDocument & "</DOCUMENT>"
		sPrintRequest = sPrintRequest & "<SHIPMENT APATHY=""SHIP"">" 
		sPrintRequest = sPrintRequest &	sCommonNode
		sPrintRequest = sPrintRequest &	sPackageNode 
		sPrintRequest = sPrintRequest &	"<SERVICE>" & B_Service & "</SERVICE>" 
		sPrintRequest = sPrintRequest &	"</SHIPMENT>"
		sPrintRequest = sPrintRequest & "<PRINTER>" & B_PrinterType & "</PRINTER>"
		sPrintRequest = sPrintRequest & "<STOCK>" & B_PrinterStock & "</STOCK>"
		sPrintRequest = sPrintRequest & "<DESTINATION>" & B_DestPrinter & "</DESTINATION>"
		sPrintRequest = sPrintRequest & "<SERVER>" & B_Server & "</SERVER>"
		sPrintRequest = sPrintRequest & "</PRINT>"
		
		saveAsFile sPrintRequest, "C:\PrintRequest.XML"
		
		'update progress bar - if a lock up occurs it can be isolated to here
		sMessage = "(Sending  " & B_RefNo & "  XML to Server)" 
		Cancelme = CancelMe + ProgressBar(True,B_Current ,,B_Count,, sMessage)

		'Send XML to Proship server
		SR = ServerQuery(sPrintRequest)
			
		'Check for success
		If Instr(1,SR,"<ERROR>") > 0 Then
			'********************************
			'Change the following query to save any error and modify a flag signifying a failed shipment
			'********************************
			'update progress bar - if a lock up occurs it can be isolated to here
			sMessage = "(Updating  " & B_RefNo & "  as Bad Shipment)" 
			Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
			
			sErrorMessage = CTrim(SR,4000)
			
			sQueryUpdate = "Update BatchInput Set ProcessedFlag = '2', ShipmentErrorMessage = '" & sErrorMessage & "' " & _
						   "Where PAckageID = '" & B_RefNo & "'"

			On Error Resume Next
			Set rsBatchInputUpdate = pCN.Execute(sQueryUpdate)
			
			If Err.Number <> 0 _
				Or Err.Description <> "" Then
				'Code displays error number and error description if error when reading CSTM(Warehouse) database
				sWindowMessage = "Received Error Updating Shipment  " & UCASE(B_RefNo) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
						   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
						   "Shipment " & UCASE(B_RefNo) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
						   "Please Report Problem to IT Department"
				sWindowName = "Batch.BatchProcessFile"
				sWindowButtons = vbCritical + vbOkOnly
				MsgBox sWindowMessage,sWindowButtons,sWindowName
			End If

			BadCount = BadCount + 1

		Else
			'Put result into a DOMDocument for easier querying	
			Set X = CreateObject("MSXML2.DOMDocument")
			If X.loadXML(SR) Then 
				saveAsFile SR, "C:\PrintOutPut.XML"
				PeriodLocation = InstrRev(B_Service,".")
				FieldLength = Len(Trim(B_Service))
				B_ServiceBack = Mid(B_Service,1,PeriodLocation - 1)
				
				'update progress bar - if a lock up occurs it can be isolated to here
				sMessage = "(Printing Label for  " & B_RefNo & "  )" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				'Get Label Image
				Select Case Trim(B_ServiceBack)
					Case "BWTI_DHL.DHL"
						sLabel = X.SelectSingleNode("//DHL_LABEL").text
						pData1 = B64_Decode(sLabel)
						sLabel = pData1
						CDBID = B_TrackNo
					Case "BWTI_FXRS.FXRS","BWTI_FXRS.CAFE"
						sLabel = X.SelectSingleNode("//FXRS_LABEL").text
						pData1 = B64_Decode(sLabel)
						sLabel = pData1
						CDBID = B_TrackNo
					Case "BWTI_UPS.UPS","BWTI_UPS.MI"
						sLabel = X.SelectSingleNode("//UPS_LABEL").text
						pData1 = B64_Decode(sLabel)
						sLabel = pData1
						CDBID = B_TrackNo
					Case "BWTI_USPS.USPS"
						sLabel = X.SelectSingleNode("//USPS_LABEL").text
						pData1 = B64_Decode(sLabel)
						sLabel = pData1
						CDBID = B_TrackNo
					Case "BWTI_LTL.LTL"
						sLabel = X.SelectSingleNode("/PLPI_MSI_STANDARD_LABEL").text
						pData1 = B64_Decode(sLabel)
						sLabel = pData1
						CDBID = B_TrackNo
				End Select
				'********************************
				'Print the label
				'Modify following if printing label now. If saving label for printing later do nothing to the following line
				sDestPrinter = B_DestPrinter
				SaveAsFile sLabel,sDestPrinter
				Pause 1.0
				intPackage = i
				B_NumberOfBoxes = 1
				'*************************************
				'update progress bar - if a lock up occurs it can be isolated to here
				sMessage = "(Updating  " & B_RefNo & "  as Good Shipment)" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				sProcessed = Celse(Now,"yyyy-mm-dd")
				
				sQueryUpdate = "Update BatchInput Set ProcessedFlag = 'Y', ProcessedDate = '" & sProcessed & "' " & _
							   "Where PAckageID = '" & B_RefNo & "'"

				On Error Resume Next
				Set rsBatchInputUpdate = pCN.Execute(sQueryUpdate)
					
				If Err.Number <> 0 _
					Or Err.Description <> "" Then
					'Code displays error number and error description if error when reading CSTM(Warehouse) database
					sWindowMessage = "Received Error Updating Shipment  " & UCASE(B_RefNo) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
							   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
							   "Shipment " & UCASE(B_RefNo) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
							   "Please Report Problem to IT Department"
					sWindowName = "Batch.BatchProcessFile"
					sWindowButtons = vbCritical + vbOkOnly
					MsgBox sWindowMessage,sWindowButtons,sWindowName
				End If
				
				'Code insert each package into CSTM(History)
				CurrentShipper = B_WarehouseCode
				OriginZip = ""
				Call FindOriginZip (CurrentShipper, OriginZip)
				
				'Code calls function to parse out carrier and service from Proship service field.
				ProShipCarrier = B_Service
				Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)	

				'Code coverts ProShip Carrier FXRS and CAFE to FEDEX in CSTM(History) Table.
				If UCase(Trim(CarrierName)) = "FXRS" _
					Or UCase(Trim(CarrierName)) = "CAFE" Then
					CarrierName = "FEDEX"
				End If
				
				'Code calls function that formats date & time into correct format for ship date
				PackageShipmentDate = CElse(Now,"yyyy-mm-dd")
				Call FormatShipmentDateTime(PackageShipmentDate, PackageShipmentDateTime)
					
				'Code calls function that formats date & time into correct format for manifest date
				PackageManifestDate = CElse(B_Date,"yyyy-mm-dd")
				Call FormatManifestDateTime(PackageManifestDate, PackageManifestDateTime)
				
				Query = "Insert into history set "

				myField = B_Ship_ID
				call fixfield(myField)
				Query = Query & "PackageId= '" & myField & "', "   'PackageID 

				myField = B_Name
				call fixfield(myField)
				Query = Query & "Invoicenumber= '" & myField & "', "		'Invoice Number

				Query = Query & "OriginZip = '" & OriginZip & "', "	
				'Query = Query & "OriginCompany = '" & GetNodeValue(SR, "/SHIPMENT/COMMON/RETURN_ADDRESS_COMPANY") & "', "
				Query = Query & "Shipper = '" & B_WarehouseCode & "', "	
				'Query = Query & "ConsigneeNumber = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/COMMON/CONSIGNEE_CODE"),50) & "',"   	
				Query = Query & "ConsigneeCompany = '" & B_C_CO & "',"  
				Query = Query & "ConsigneeContact = '" & B_C_CT & "'," 		
				Query = Query & "ConsigneeAddress1= '" & B_C_A1 & "',"  
				Query = Query & "ConsigneeAddress2= '" & B_C_A2 & "'," 
				'Query = Query & "ConsigneeAddress3= '" & CTrim(strShipToAddress3,50) & "',"  
				Query = Query & "ConsigneeCity = '" & B_C_CY & "',"   
				Query = Query & "ConsigneeState = '" & B_C_ST & "',"   
				Query = Query & "ConsigneeZip = '" & B_C_ZP & "',"   

				myField = B_C_PH
				call fixfield(myField)
				Query = Query & "ConsigneePhone = '" & myField & "',"   
				
				Query = Query & "CountryCode = '" & B_C_Country  & "', "	
				'Query = Query & "ConsigneeBillTo = ' ', "  
				Query = Query & "ProshipCarrier ='" & ProShipCarrier & "', "   
				'Query = Query & "CustomerShipMethodIn = '" & Trim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_IN")) & "', "  
				'Query = Query & "CustomerShipMethodOut ='" & Trim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")) & "', "	
				Query = Query & "Carrier ='" & CTrim(Carriername,25)  & "', "	
				Query = Query & "Class ='" & CTrim(CarrierService,30)  & "', "		
				'Query = Query & "Operator =  '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_SHIPPERID"),20) & "',"  
				'Query = Query & "Picker = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PICKER"),20) & "',"   
				'Query = Query & "Packer = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PACKER"),20) & "',"  

				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					B_PSVoidID = "BLTL." & B_Ship_ID
					Query = Query & "PSVoidID = '" & B_PSVoidID & "', "  
				Else
					Query = Query & "PSVoidID =  '" & X.SelectSingleNode("//PS_VOID_ID").text & "', "	
				End If
				
				Query = Query & "MAXBOX = " & B_NumberOfBoxes & ", "
				Query = Query & "CURBOX =  " & B_NumberOfBoxes & ", "
				'Query = Query & "Residential = '" & Trim(ResidentialFlag)  & "', "	
				
				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					Query = Query & "Zone = '', "  
				Else
					Query = Query & "Zone = '" & X.SelectSingleNode("//ZONE").text & "', "	
				End If
				
				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					Query = Query & "BilledWeight = " & CNum(iWeight) & ", "	
					Query = Query & "ActualWeight = " & CNum(iWeight) & ", "					
				Else
					Query = Query & "BilledWeight = " & CNum(X.SelectSingleNode("//RATED_WEIGHT").text) & ", "	
					Query = Query & "ActualWeight = " & CNum(B_Weight) & ", "
				End If

				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					Query = Query & "TrackingNumber = '" & B_Ship_ID & "', "  
				Else
					Query = Query & "TrackingNumber = '" & X.SelectSingleNode("//TRACKING_NUMBER").text & "', " 
				End If
					
				Query = Query & "ShipDate = '" & PackageShipmentDateTime & "', " 
				Query = Query & "ManifestDate = '" & PackageManifestDateTime	& "', "	
				
				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					Query = Query & "FuelSurcharge = '0.00', "
					Query = Query & "BaseCharge = " & CNum(iBaseCost) & ", "
					'Query = Query & "CodAmount = " & CNum(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage  & "]/COD_AMOUNT")) & ", " 
					'Query = Query & "CodFee = " & CNum(GetNodeValue(SR, "/SHIPMENT/COMMON/COD_FEE")) & ", "  
					'Query = Query & "CODPaymentMethod = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage & "]/COD_PAYMENT_METHOD"),50) & "', "
					Query = Query & "TotalCharge  = " & CNum(iTotalCost) & ", "						
				Else
					Query = Query & "FuelSurcharge = " & CNum(X.SelectSingleNode("//FUEL_SURCHARGE").text) & ", " 
					Query = Query & "BaseCharge = " & CNum(X.SelectSingleNode("//BASE").text) & ", "
					'Query = Query & "CodAmount = " & CNum(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage  & "]/COD_AMOUNT")) & ", " 
					'Query = Query & "CodFee = " & CNum(GetNodeValue(SR, "/SHIPMENT/COMMON/COD_FEE")) & ", "  
					'Query = Query & "CODPaymentMethod = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage & "]/COD_PAYMENT_METHOD"),50) & "', "
					Query = Query & "TotalCharge  = " & CNum(X.SelectSingleNode("//TOTAL").text) & ", "	
				End If
					
					myField = B_Ship_ID
				call fixfield(myField)
				Query = Query & "PLDReference1 = '" & myField & "', "	
				
				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_COMPANY"),40)
				REM call fixfield(myField)
				REM Query = Query & "TPBCompany = '" & myField & "', "	

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CONTACT"), 40)
				REM call fixfield(myField)
				REM Query = Query & "TPBContact = '" & myField & "', "	

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS1"), 40)
				REM call fixfield(myField)
				REM Query = Query & "TPBAddress = '" & myField & "', "		

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS2"), 40)
				REM call fixfield(myField)
				REM Query = Query & "TPBAddress2 = '" & myField & "', "					

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CITY"),25)
				REM call fixfield(myField)
				REM Query = Query & "TPBCity = '" & myField & "', "		

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_STATE"), 20)
				REM call fixfield(myField)
				REM Query = Query & "TPBState = '" & myField  & "', "			

				REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_POSTALCODE"), 20)
				REM call fixfield(myField)
				REM Query = Query & "TPBZip = '" & myField & "', "	

				Query = Query & "PackageType = '" & B_Packaging & "', "	
				Query = Query & "PaymentType =  '" & B_Terms & "', "
				Query = Query & "Interface = '" & B_Interface & "', "
					
				Query = Query & "UserText1 = '', "	
				Query = Query & "UserText2 = '', "
				Query = Query & "UserText3 = '" & B_InvoiceType & "', "
				Query = Query & "UserText4 = '', "
				Query = Query & "UserText5 = '', "
				
				If B_Service = "BWTI_LTL.LTL.MSISTANDARD" _ 
					Or B_Service = "BWTI_LTL.LTL.MSIPARCELONE" Then
					Query = Query & "UserNumber3 = " & CNum(iTotalCost) & ", "				
				Else
					Query = Query & "UserNumber3 = " & CNum(X.SelectSingleNode("//TOTAL").text) & ", "
				End If
				
				Query = Query & "UserNumber4 = '0.00', "
				Query = Query & "UserNumber5 = '0.00' "

				On Error Resume Next
				Set rsHistory = pCN.Execute(Query,RecordsAffected)	

				If Err.Number <> 0 Then
					'Code displays error number and error description if error when creating datbase
					strErrorMessage = Err.Number & "  " & Err.Description 
					strWindowName = "Batch.BatchProcessFile"
					strWindowButtons = vbCritical + vbOkOnly
					MsgBox strErrorMessage,strWindowButtons,strWindowName
				End If	
			Else
				'The result returned was not XML - this should  not happen 
				msgbox "Response not XML!",16,"Panic, Panic, Panic"
			End If
			B_Current = B_Current + 1
			rsBatchInput.MoveNext
		End If
	Next	
	
	'Clean up
	Msgbox "Processed  " & B_Current & "  Shipments  (with " & BadCount & " failures)",48,"Note:"
	ProgressBar False, 0
	Set rsBatchInput = Nothing
	
End Function


Function BatchImportFileBMA()
	'========================================================================
	' This function reads in a input file from Blue Mountain Arts and creates shipment
	' records into CSTM(BATCHINPUT) table. This table is used for processing shipments
	' through batch process. Text file from Blue Mountain Arts to fixed length file. This 
	' function gets called from USER.PSS and is found under USER menu.
	'========================================================================
	
	'Set variables
	sQuery		= ""
	sFileName  	= ""
	sBatchName 	= ""
	iCurrentPackageID  = ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_STARTING_PACKAGEID") = ""
	
	'Code displays open file dialogue box so operator can find where batch file is located
	sFileName = ShowFileOpenDialog ("C:\", "Batch File to Import", "Text files (*.txt)")
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code checks for input file from Acumen. Not found display error message.
	If fso.FileExists(sFileName) Then
	Else
		'Displays error message if Batch file not found
		sWindowMessage = "Can't find input file for Batch!" & vbcrlf & strInputFileLocation
		sWindowName = "Batch.BatchCustomerImportFile"
		sWindowButtons = vbCritical + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName	
		Exit Function
	End If	
	 
	'Code displays Batch Import screen.
	ShowForm "BATCHIMPORT",True,True
	
	'Code gets batch name from Proship xml node
	sBatchName = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME")
	iCurrentPackageID = CNum(Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_STARTING_PACKAGEID"))
	
	'Code open input Batch File 
	Set TS = FSO.OpenTextFile(sFileName,1)
	
	iCurrent = 0
	iCount   = 6000
	ProgressBar True,iCurrent,0,iCount,"Batch File Import","Importing Batch Records...", True
		
	'Code reads through Batch file until all records have been read.
	Do While Not TS.AtEndOfStream
		sLine = TS.ReadLine
			
		'Code only reads text line if it contains data in first field
		If Left(sLine,5) <> "" Then
		
			Cancelme = CancelMe + ProgressBar(True,iCurrent)
			If CancelMe <> 0 Then 'If user presses cancel then stop
				ProgressBar False, 0
				Exit Function
			End If
			
			sPackageID 			= iCurrentPackageID
			sInvoiceID			= sBatchName
			sCustomerID			= Left(sLine,5)
			sCustomerContact 	= Mid(sLine,6,35)
			sCustomerName 		= Mid(sLine,46,35)
			sCustomerAddress1 	= Mid(sLine,86,35)
			sCustomerAddress2	= Mid(sLine,126,35)
			sCustomerCity 		= Mid(sLine,166,30)
			sCustomerState 		= Mid(sLine,196,2)
			sCustomerZip 		= Mid(sLine,198,5)
			sCustomerCountry 	= ""
			sMiscText1 			= ""
			sMiscText2 			= ""
			sInvoiceTypeShipVia	= ""
			sCustomerAddress3	= ""
			sCustomerPhone		= ""
			iTotalSales 		= 0.00
			iCustomerCharge 	= 0.00
			sProcessedFlag 		= "N"
			sRecordType			= "B"
			sCustomerType		= ""
			
			'Code removes characters not acceptable to MySQL
			sCustomerName 		= FixStringField (sCustomerName)
			sCustomerAddress1	= FixStringField (sCustomerAddress1)
			sCustomerAddress2 	= FixStringField (sCustomerAddress2)
			sCustomerCity 		= FixStringField (sCustomerCity)
			sCustomerState 		= FixStringField (sCustomerState)
			sCustomerCountry 	= FixStringField (sCustomerCountry)
			
			'Code converts country name to valid ISO2 code
			If sCustomerCountry <> "" Then
				sCountryCode = Sys.E("//COUNTRIES/COUNTRY[PLAINTEXT='" & UCase(sCustomerCountry) & "']/SYMBOL")
				sCustomerCountry = sCountryCode
			Else
				sCustomerCountry = "US"
			End If
			
			'Code finds "" contained in invoice type and ship via field
			iSpaceLocation = Instr(1,sInvoiceTypeShipVia," ")

			'Code separates invoice type and ship via if "" is found in field
			If iSpaceLocation > 0 Then
				sInvoiceType = Mid(sInvoiceTypeShipVia,1,iSpaceLocation - 1)
				sShipVia = Mid(sInvoiceTypeShipVia,iSpaceLocation + 1, 10)
			End If

			'Codes builds insert statement
			sQuery = "Insert into BatchInput set "
			sQuery = sQuery & "PackageID = '" & sPackageID & "', "	
			sQuery = sQuery & "InvoiceID = '" & UCase(sInvoiceID) & "', "
			sQuery = sQuery & "CustomerID = '" & sCustomerID & "', "
			sQuery = sQuery & "CustomerName = '" & sCustomerName & "',"
			sQuery = sQuery & "CustomerContact = '" & sCustomerContact & "',"
			sQuery = sQuery & "CustomerAddress1 = '" & sCustomerAddress1 & "'," 
			sQuery = sQuery & "CustomerAddress2= '" & sCustomerAddress2 & "'," 
			sQuery = sQuery & "CustomerAddress3= '" & sCustomerAddress3 & "'," 
			sQuery = sQuery & "CustomerCity= '" & sCustomerCity & "',"
			sQuery = sQuery & "CustomerState = '" & sCustomerState & "',"
			sQuery = sQuery & "CustomerZip = '" & sCustomerZip & "'," 
			sQuery = sQuery & "CustomerCountry = '" & sCustomerCountry & "',"
			sQuery = sQuery & "CustomerPhone = '" & sCustomerPhone & "',"  			
			sQuery = sQuery & "CustomerShipMethod = '" & sShipVia & "',"
			sQuery = sQuery & "InvoiceType = '" & sInvoiceType & "'," 
			sQuery = sQuery & "TotalSales = " & iTotalSales & ", " 
			sQuery = sQuery & "CustomerCharge =  " & iCustomerCharge & ", " 	
			sQuery = sQuery & "RecordType =  '" & sRecordType & "', "			
			sQuery = sQuery & "MiscText1 =  '" & sCustomerType & "', "	
			sQuery = sQuery & "MiscText2 =  '', "
			sQuery = sQuery & "MiscText3 =  '', "
			sQuery = sQuery & "MiscText4 =  '', "
			sQuery = sQuery & "MiscText5 =  '', "
			sQuery = sQuery & "ProcessedFlag =  'N' "
			
			REM MsgBox sPackageID & vbcrlf & _
			       REM sInvoiceID & vbCrlf & _
				   REM sCustomerID & vbCrlf & _
				   REM sCustomerName & vbcrlf & _
				   REM sCustomerAddress1 & vbcrlf & _
				   REM sCustomerAddress2 & vbCrlf & _
				   REM sCustomerCity & vbCrlf & _
				   REM sCustomerState & vbCrlf & _
				   REM sCustomerZip & vbCrlf & _
				   REM sCustomerCountry & vbCrlf & _
				   REM sRecordType 
				   
			REM Exit Function

			On Error Resume Next
			Set rsBatchInput = pCN.Execute(sQuery)
				
			If Err.Number <> 0 Then
				'Code displays error number and error description if error when reading CSTM(Warehouse) database
				strWindowMessage = Err.Number & "  " & Err.Description & vbCrlf & vbCrLF & vbCrlf & _
								   "Can not insert PackageID  " & sPackageID & "  into CSTM(BatchInput) Table" & vbcrlf & vbCrlf & vbcrlf & _
								   sCustomerName & vbcrlf & _
								   sCustomerAddress1 & vbcrlf & _
								   sCustomerAddress2 & vbCrlf & _
								   sCustomerCity & vbCrlf & _
								   sCustomerState & vbCrlf & _
								   sCustomerZip & vbCrlf & _
								   sCustomerCountry & vbCrlf & _
								   sRecordType & vbCrlf & _
								   sShipVia
				strWindowName = "Batch.BatchCustomerImportFile"
				strWindowButtons = vbCritical + vbOkOnly
				MsgBox strWindowMessage,strWindowButtons,strWindowName
			End If
			
			iCurrent = iCurrent + 1
			iCurrentPackageID = iCurrentPackageID + 1
		End If
	loop
	
	ProgressBar False, 0
		
	'Code displays message that Acumen import has completed.	
	strWindowMessage = "Customer Batch import into ProShip has Completed. Click OK Button to Continue"  & vbCrlf & vbCrlf &_
					   "Batch File:  " & sFileName & vbcrlf & _
					   "Contained:   " & iCurrent & "  Records"
	strWindowName = "Batch.BatchCustomerImportFile"
	strWindowButtons = vbExclamation & vbOKOnly
	MsgBox strWindowMessage,strWindowButtons,strWindowName		
	
	'Code empties RecordSet
	Set rsBatchInput = Nothing
	
End Function


Function BatchVoidShipment(strPSVoidId, strDeliveryID, strInterfaceSource, strPackageID)
	'========================================================================
	' This function Voids shipment in CSTM(BatchInput) table, when operator voids shipment
	' in Proship.
	'========================================================================
	
	'Set variables
	sQuery		= ""

	'Code runs query to VOID shipment in CSTM(History) table.	
	sQuery = "UPDATE CSTM.BatchInput set processedflag = 'N', " & _
          	 "ShipmentErrorMessage = Null, ProcessedDate = Null " & _
			 "Where packageid = '" & Trim(strPackageid) & "'"

	'Code calls function that logs information in Databse CSTM table Transactionlog
	strText = sQuery
	strFunctionname = "Batch.pss"
	StrMessage = "Void Shipment in BatchInput"
	Call AddLogTransaction(StrText, StrFunctionName, StrMessage, strPackageID)

	Set rsBatchInput = pCN.Execute(sQuery, RecordsAffected)
	
	'Displays error message if shipment wasn't VOIDED in CSTM(History) table
	If RecordsAffected < 1 Then
		strErrorMessage = "Shipment " & UCASE(strPackageID) & " NOT VOIDED in CSTM BatchInput table"
		strWindowName = "Batch - BatchVoidShipment"
		strWindowButtons = vbCritical + vbOkOnly
		MsgBox strErrorMessage,strWindowButtons,strWindowName
	End If
				
End Function


Function BatchSAPFindFile(sSAPFileName, blnOkToContinue)
	'========================================================================
	' This function pops screen to operator so they can pick SAP batch file that needs
	' to be processed.
	'========================================================================
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code displays open file dialogue box so operator can find where batch file is located
	sSAPFileName = ShowFileOpenDialog ("C:\", "SAP Batch File to Import", "CSV files (*.csv)")
	
	'Code checks for input file from Acumen. Not found display error message.
	If fso.FileExists(sSAPFileName) Then
		'Code sets flag to continue
		blnOkToContinue = True
	Else
		'Displays error message if operator didn't find or pick a file to import
		sWindowMessage = "Batch Import Cancelled by Operator"
		sWindowName = "Batch.BatchSAPFindFile"
		sWindowButtons = vbInformation + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName	
		
		'Code sets flag to not continue
		blnOkToContinue = False
	End If

End Function	


Function BatchSAPGetOrderCount(iSAPBatchCountTotal, sSAPFileName, blnOkToContinue)
	'========================================================================
	' This function gets total shipments in SAP batch to process. 
	'========================================================================
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	sLine	= ""
	
	'Code open input Batch File 
	Set TS = FSO.OpenTextFile(sSAPFileName,1)
	
	iCurrent = 0
	iCount   = 6000
	ProgressBar True,iCurrent,0,iSAPBatchCountTotal,"SAP Batch File Import","Reading SAP Batch Record...", True
		
	'Code reads through Batch file until all records have been read.
	Do While Not TS.AtEndOfStream
		sLine = TS.ReadLine
			
		'Code only reads text line if it contains data in first field
		If Trim(sLine) <> "" Then
			sMessage = "Reading SAP Batch Record..."
			Cancelme = CancelMe + ProgressBar(True,iSAPBatchCountTotal,,,, sMessage)
			If CancelMe <> 0 Then 'If user presses cancel then stop
				ProgressBar False, 0
				Exit Function
			End If
			
			iSAPBatchCountTotal = iSAPBatchCountTotal + 1
		End If
	Loop

	'Code removes proress bac from screen
	ProgressBar False, 0	
	
End Function

Function BatchSAPImportFile()
	'========================================================================
	' This function reads in a CSV that contains SAP orders and creates shipment
	' records into CSTM(BATCHINPUT) table. This table is used for processing shipments
	' through SAP batch process. This function gets called from USER.PSS and is found 
	' under USER menu.
	'========================================================================
	
	'Set variables
	iSAPBatchCountTotal = 0
	sSAPFileName		= ""
	blnOkToContinue			= True
	iRecordCount			= 0
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = ""
	strWarehouse 			= Shipment.E("/SHIPMENT/COMMON/SHIPPER")
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	'Code calls function to find SAP batch file to import 
	Call BatchSAPFindFile(sSAPFileName, blnOkToContinue)
	
	'Code exits batch import if not file was found
	If blnOkToContinue = False Then
		Exit Function
	End If
	
	'Code displays batch import Screen
	ShowForm "BATCHIMPORT",True,True
	
	'Displays error message if operator didn't enter a batch name then exits function
	If Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = "" Then
		sWindowMessage = "Batch Name can't be empty"
		sWindowName = "Batch.BatchSAPImportFile"
		sWindowButtons = vbInformation + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName
		Exit Function
	End If
	
	'Code calls function to that validates data in CSV Batch File.
	Call BatchSAPValidateImportFile(sLine, sSAPFileName, blnOkToContinue)
	
	'Code calls function that reads CSTM(Warehouse) table to find location of SAP files
	'Call ReadWarehouseTable(sInputFileLocation, sOutPutFileLocation, sOutputLaunchFile, strWarehouse, OkToContinue)
	
	'Code reads through SAP batch file
	If blnOkToContinue = True Then
	
		'Code finds out number of shipments in SAP batch
		iRecordCount = BatchSAPRecordCount(sSAPFileName)
		
		'Code sets up progress bar that gives operator feed back on import process	
		iCurrent = 0
		iCount   = iRecordCount
		ProgressBar True,iCurrent,0,iCount,"SAP Batch File Import","Importing SAPBatch Records...", True
		
		'Set object variables
		Set fso = CreateObject("Scripting.FileSystemObject")
		
		'Code open input Batch File 
		Set TS = FSO.OpenTextFile(sSAPFileName,1)
		
		'Code skips first line because Header Line
		TS.Skipline
 
		'Code reads through Batch file until all records have been read.
		Do While Not TS.AtEndOfStream
			sLine = TS.ReadLine

			Fieldz = Split(sLine,",")
			strDeliveryID = Fieldz(0)
				
			'Code only reads text line if it contains data in first field
			If strDeliveryID <> "" Then	
				
				'Code updates current progress bar
				sMessage = "(Importing Shipment " & iCurrent & "  Of  " & iCount & ")" 
				Cancelme = CancelMe + ProgressBar(True,iCurrent ,,,, sMessage)

				'Code closes progress bar and exit function if operator clicks cancel button 
				If CancelMe <> 0 Then 
					ProgressBar False, 0
					Exit Function
				End If

				'Code sets variables
				OkToContinue	= True
				blnSWOGFlag		= False
				
				'Code calls function that reads input file from SAP
				If OkToContinue = True Then	
				
					'Code deletes SAP nodes from current Proship Shipment XML
					'Shipment.DeleteElement("/SHIPMENT/CMS/SAP_ORDHD")
					'Shipment.DeleteElement("/SHIPMENT/CMS/SAP_ERROR/MESSAGE")
					
					'Code calls function that populates shipment xml from SAP file
					Call CustomerLoadShipment(strDeliveryID, OkToContinue)
					
					'Code calls function that inserts batch records into batchinput table
					If OkToContinue = True Then
						Call BatchSAPInsertBatchInputTable(strDeliveryID, OkToContinue)
					End If
				End If
				
				'Code updates good record import counter
				If OkToContinue = True Then	
					iCurrent = iCurrent + 1
				End If
			End If

			'Code blanks out current Proship XML
			'Shipment.RESET()			
		Loop
		
		'Code closes progress bar on screen
		ProgressBar False, 0

		'Code displays message that SAP import has completed.	
		sWindowMessage = "SAP Batch import into ProShip has Completed. Click OK Button to Continue"  & vbCrlf & vbCrlf &_
						   "Batch File:  " & sSAPFileName & vbcrlf & _
						   "Contained:   " & iCurrent & "  Records"
		sWindowName = "Batch.BatchSAPImportFile"
		sWindowButtons = vbExclamation & vbOKOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName			
		
		'Code blanks out current Proship XML
		Shipment.RESET()
	End If
	
End Function


Function BatchSAPValidateImportFile(sLine, sSAPFileName, blnOkToContinue)
	'========================================================================
	' This function reads in a second line of CSV that contains SAP orders to validate
	' that no fields are missing and all packages fields contain s a valid weight or valid 
	' box type.
	'========================================================================
	
	'Code sets variables
	sBoxType		= ""
	sBoxWeight		= ""
	blnBoxTypeFound	= False
	iBoxWeight		= 1
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code open input Batch File 
	Set TS = FSO.OpenTextFile(sSAPFileName,1)

	'Code skips first line because Header Line
	TS.Skipline
	
	'Code reads second line of CSV file
	sLine = TS.ReadLine
		
	'Code displays error message that current line of CSV file is empty
	If Trim(sLine) = "" Then
		sWindowMessage = "Current line of CSV batch file is blank. Look to " & vbCrlf & _
						 "make sure file is in correct format." & vbcrlf & vbCrlf & _
						 "Batch file wasn't imported."
		sWindowName = "Batch.BatchSAPValidateImportFile"
		sWindowButtons = vbInformation + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName	
		
		'Code sets flag to not continue
		blnOkToContinue = False
		
		Exit Function
	End If
		
	'Code splits line into separate fields
	ExcelFields = Split(sLine,",")
	
	'Code reads through Excel spreadsheet looking for number of packages/weight on each line
	For Each iBoxWeight in ExcelFields	
		'Code displays gets for weight or Box type for package 1 from CSV batch file
		If Trim(iBoxWeight) <> "" Then			
			sBoxType = Trim(iBoxWeight)
			
			'Code calls function to find box type in CSTM.BoxDimension table
			Call ValidateBoxType(sBoxType, sBoxWeight, sBoxDimensions, blnBoxTypeFound)
						
			If blnBoxTypeFound = True Then
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_TYPE") = sBoxType
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_WEIGHT") = sBoxWeight
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_DIMENSIONS") = sBoxDimensions
				
			ElseIf IsNumeric(sBoxType) _
				And blnBoxTypeFound = False Then
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_TYPE") = ""
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_WEIGHT") = sBoxType
				Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_DIMENSIONS") = ""
			Else
				sWindowMessage = "Package 1 field doesn't contain valid weight or box " & vbCrlf & _
								 "type not found in Box Dimension table." & vbCrlf & vbCrlf & _
								 "Please fix problem before trying to re-import file." & vbcrlf & vbCrlf & _
								 "Batch file wasn't imported."
				sWindowName = "Batch.BatchSAPValidateImportFile"
				sWindowButtons = vbInformation + vbOkOnly
				MsgBox sWindowMessage,sWindowButtons,sWindowName	
				
				'Code sets flag to not continue
				blnOkToContinue = False
				
				Exit Function
			End If
		End If
	Next
End Function


Function BatchSAPRecordCount(myField)
	'========================================================================
	' This function reads a text file and returns number of lines in batch file.
	'========================================================================
	
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code open input Batch File 
	Set objBatchFile = FSO.OpenTextFile(myField,1)
	
	'Codes reads all lines in batch file
	objBatchFile.ReadAll

	'Code returns number of lines in batch file
	BatchSAPRecordCount = objBatchFile.Line - 2 

End Function


Function BatchSAPInsertBatchInputTable(strDeliveryID, OkToContinue)
	'========================================================================
	' This function reads in a inserts records into CSTM.BatchInput table for batch 
	' shipments.
	'========================================================================
	
	'Set variables
	sQuery		= ""
	sNode		= "/SHIPMENT/CMS/SAP_ORDHD"
		
	'Code sets variables for insert statement
	sPackageID 				= Ctrim(FixStringField(Shipment.E("/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/DELIVERY_NUMBER")),20)
	sInvoiceID				= FixStringField(Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME"))
	sShipperID				= Shipment.E("/SHIPMENT/COMMON/SHIPPER")
	sCustomerID				= CTrim(Shipment.E("/SHIPMENT/CMS/CSTM_CUSTOMERID"),20)
	sCustomerContact 		= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_CONTACT")),35)
	sCustomerName 			= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_COMPANY")),35)
	sCustomerAddress1 		= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_ADDRESS1")),35)
	sCustomerAddress2		= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_ADDRESS2")),35)
	sCustomerAddress3		= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_ADDRESS3")),35)
	sCustomerCity 			= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_CITY")),30)
	sCustomerState 			= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_STATE")),2)
	sCustomerZip 			= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_POSTALCODE")),15)
	sCustomerCountry 		= CTrim(FixStringField(Shipment.E("/SHIPMENT/COMMON/CONSIGNEE_COUNTRY")),30)
	sCustomerPhone			= CTrim(FixStringField(Shipment.E("SHIPMENT/COMMON/CONSIGNEE_PHONE")),20)
	sPurchaseOrder			= CTrim(FixStringField(s.e("/SHIPMENT/CMS/CSTM_PO_NUMBER")),50)
	sShipVia				= ""
	sPaymentTerms			= "SHIPPER"

	'Code checks for exists of CSTM_PACKAGE1 nodes.
	If Shipment.ElementExists("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_WEIGHT") > 0 _
		And Cnum(Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_WEIGHT")) > 0 Then
		sPackage1BoxType		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_TYPE")
		sPackage1BoxWeight		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_WEIGHT")
		sPackage1BoxDimensions	= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE1/BOX_DIMENSIONS")
	Else
		sPackage1BoxType		= ""
		sPackage1BoxWeight		= "0.000"
		sPackage1BoxDimensions	= ""
	End If
	
	'Code checks for exists of CSTM_PACKAGE2 nodes.
	If Shipment.ElementExists("/SHIPMENT/CMS/CSTM_PACKAGE2/BOX_WEIGHT") > 0 _
		And Cnum(Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE2/BOX_WEIGHT")) > 0 Then
		sPackage2BoxType		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE2/BOX_TYPE")
		sPackage2BoxWeight		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE2/BOX_WEIGHT")
		sPackage2BoxDimensions	= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE2/BOX_DIMENSIONS")
	Else
		sPackage2BoxType		= ""
		sPackage2BoxWeight		= "0.000"
		sPackage2BoxDimensions	= ""
	End If
	
	'Code checks for exists of CSTM_PACKAGE3 nodes.
	If Shipment.ElementExists("/SHIPMENT/CMS/CSTM_PACKAGE3/BOX_WEIGHT") > 0 _
		And Cnum(Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE3/BOX_WEIGHT")) > 0 Then
		sPackage3BoxType		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE3/BOX_TYPE")
		sPackage3BoxWeight		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE3/BOX_WEIGHT")
		sPackage3BoxDimensions	= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE3/BOX_DIMENSIONS")
	Else
		sPackage3BoxType		= ""
		sPackage3BoxWeight		= "0.000"
		sPackage3BoxDimensions	= ""
	End If
	
	'Code checks for exists of CSTM_PACKAGE4 nodes.
	If Shipment.ElementExists("/SHIPMENT/CMS/CSTM_PACKAGE4/BOX_WEIGHT") > 0 _
		And Cnum(Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE4/BOX_WEIGHT")) > 0 Then
		sPackage4BoxType		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE4/BOX_TYPE")
		sPackage4BoxWeight		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE4/BOX_WEIGHT")
		sPackage4BoxDimensions	= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE4/BOX_DIMENSIONS")
	Else
		sPackage4BoxType		= ""
		sPackage4BoxWeight		= "0.000"
		sPackage4BoxDimensions	= ""
	End If
	
	'Code checks for exists of CSTM_PACKAGE5 nodes.
	If Shipment.ElementExists("/SHIPMENT/CMS/CSTM_PACKAGE5/BOX_WEIGHT") > 0 _
		And Cnum(Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE5/BOX_WEIGHT")) > 0 Then
		sPackage5BoxType		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE5/BOX_TYPE")
		sPackage5BoxWeight		= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE5/BOX_WEIGHT")
		sPackage5BoxDimensions	= Shipment.E("/SHIPMENT/CMS/CSTM_PACKAGE5/BOX_DIMENSIONS")
	Else
		sPackage5BoxType		= ""
		sPackage5BoxWeight		= "0.000"
		sPackage5BoxDimensions	= ""
	End If
	
	sInvoiceType			= ""
	iTotalSales 			= 0.00
	iCustomerCharge 		= 0.00
	sProcessedFlag 			= "N"
	sRecordType				= "B"
	sMiscText1 				= Shipment.E("/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/SALES_ORGANIZATION")
	sMiscText2 				= Shipment.E("/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/INVOICE_CODE")
	sMiscText3				= ""
	sMiscText4				= ""
	sMiscText5				= ""
	
	'Code sets on Residential flag in Proship
	If Shipment.E(sNode & "/RES") = "Y" Then
		sResidentialFlag = "Y"
	Else
		sResidentialFlag = "N"
	End If
	
	'Code converts country code from SAP to ISO codes for Proship
	If sCustomerCountry <> "" _
		And sCustomerCountry <> "US" Then
		strCountryName = sCustomerCountry
		strISOCode = ""
		
		'Code calls function that converts customers country codes to ISO codes for Proship
		Call Plaintext2ISO2(strCountryName, strISOCode)
		sCustomerCountry = strISOCode
	Else
		sCustomerCountry = "US"
	End If	
	
	'Codes builds insert statment if OkToContinue flag is TRUE
	If OkToContinue = True Then
		sQuery = "Insert into BatchInput set "
		sQuery = sQuery & "PackageID = '" & sPackageID & "', "	
		sQuery = sQuery & "InvoiceID = '" & UCase(sInvoiceID) & "', "
		sQuery = sQuery & "ShipperID = '" & UCase(sShipperID) & "', "
		sQuery = sQuery & "CustomerID = '" & sCustomerID & "', "
		sQuery = sQuery & "CustomerName = '" & sCustomerName & "',"
		sQuery = sQuery & "CustomerContact = '" & sCustomerContact & "',"
		sQuery = sQuery & "CustomerAddress1 = '" & sCustomerAddress1 & "'," 
		sQuery = sQuery & "CustomerAddress2	= '" & sCustomerAddress2 & "'," 
		sQuery = sQuery & "CustomerAddress3	= '" & sCustomerAddress3 & "'," 
		sQuery = sQuery & "CustomerCity = '" & sCustomerCity & "',"
		sQuery = sQuery & "CustomerState = '" & sCustomerState & "',"
		sQuery = sQuery & "CustomerZip = '" & sCustomerZip & "'," 
		sQuery = sQuery & "CustomerCountry = '" & sCustomerCountry & "',"
		sQuery = sQuery & "CustomerPhone = '" & sCustomerPhone & "',"  	
		sQuery = sQuery & "PurchaseOrder = '" & sPurchaseOrder & "',"	
		sQuery = sQuery & "CustomerShipMethod = '" & sShipVia & "',"
		sQuery = sQuery & "InvoiceType = '" & sInvoiceType & "'," 
		sQuery = sQuery & "ResidentialFlag = '" & sResidentialFlag & "', "
		sQuery = sQuery & "PaymentTerms = '" & sPaymentTerms & "', "
		sQuery = sQuery & "Package1Weight = " & sPackage1BoxWeight & "," 	
		sQuery = sQuery & "Package1BoxType = '" & sPackage1BoxType & "'," 
		sQuery = sQuery & "Package1Dimensions = '" & sPackage1BoxDimensions & "'," 	
		sQuery = sQuery & "Package2Weight = " & sPackage2BoxWeight & "," 	
		sQuery = sQuery & "Package2BoxType = '" & sPackage2BoxType & "'," 
		sQuery = sQuery & "Package2Dimensions = '" & sPackage2BoxDimensions & "'," 
		sQuery = sQuery & "Package3Weight = " & sPackage3BoxWeight & "," 	
		sQuery = sQuery & "Package3BoxType = '" & sPackage3BoxType & "'," 
		sQuery = sQuery & "Package3Dimensions = '" & sPackage3BoxDimensions & "'," 
		sQuery = sQuery & "Package4Weight = " & sPackage4BoxWeight & "," 	
		sQuery = sQuery & "Package4BoxType = '" & sPackage4BoxType & "'," 
		sQuery = sQuery & "Package4Dimensions = '" & sPackage4BoxDimensions & "'," 
		sQuery = sQuery & "Package5Weight = " & sPackage5BoxWeight & "," 	
		sQuery = sQuery & "Package5BoxType = '" & sPackage5BoxType & "'," 
		sQuery = sQuery & "Package5Dimensions = '" & sPackage5BoxDimensions & "'," 
		sQuery = sQuery & "TotalSales = " & iTotalSales & ", " 
		sQuery = sQuery & "CustomerCharge = " & iCustomerCharge & ", " 	
		sQuery = sQuery & "RecordType = '" & sRecordType & "', "			
		sQuery = sQuery & "MiscText1 = '" & sMiscText1 & "', "	
		sQuery = sQuery & "MiscText2 = '" & sMiscText2 & "', "
		sQuery = sQuery & "MiscText3 = '" & sMiscText3 & "', "
		sQuery = sQuery & "MiscText4 = '" & sMiscText4 & "', "
		sQuery = sQuery & "MiscText5 = '" & sMiscText5 & "', "
		sQuery = sQuery & "ProcessedFlag = 'N' "
				
		On Error Resume Next
		Set rsBatchInput = pCN.Execute(sQuery)
		
		'Code displays error message to operator if problem reading cstm(history) table.
		If Err.Number <> 0 _
			Or Err.Description <> "" Then
			
			MsgBox Err.Number & vbcrlf & vbCrlf & _
				   Err.Description
			
			'Code calls function that logs information in Database CSTM table Transactionlog
			strText = Err.Number & " - " & Err.Description 
			strPackageID  = UCase(sInvoiceID)
			strFunctionname = "BatchInsertBatchInputTable"
			strMessage = "Error Inserting Batch record " & sPackageID & " into BatchInput Table"
			strMessage = Replace(strMessage, "\", "\\")
			Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
			
			'Code clears error and allows Proship to continue
			Err.Clear
			
		End If
	End If

End Function


Function BatchSAPProcessFile()
	'========================================================================
	' This function allows operator to pick a customer batch and process these shipments
	' through Proship, printing labels, updating customer ERP system and updating
	' CSTM.History table.
	'========================================================================
	
	'Code sets variables
	sQuery 				= ""
	sBatchName			= ""
	iTotalPackageCount	= 0
	iCurrrentPackage 	= 0	
	blnBatchFilePicked	= True
	blnOkToContinue		= True
	Shipment.E("/SHIPMENT/CMS/CSTM_INTERFACE")						= "BATCH"
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")	= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") 					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG")			= ""
	
	'Codes closes connection
	Set rsBatchInput = Nothing
	
	'Code calls function that displays list of customer batches to process
	Call BatchSAPDisplayBatchFiles(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	
	'Code exits function if operator doesn't pick a batch to process
	If blnBatchFilePicked = False Then
		Exit Function
	End If
	
	'Code calls function to build domestic and international ship-via combo box
	Call BatchBuildShipMethodComboBox()

	'Code calls function to build product code combo box
	Call BatchBuildProductComboBox
	
	'Code stores batch name to process
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = sBatchName
		   
	'Code populates number of shipment to process with total records left in CSTM(BatchInput)
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS") = iTotalPackageCount

	'Code displays screen to fill out how they need to process batch file.
	ShowForm "BATCH",True,True
	
	'Code calls function that translates domestic ship method to valid Proship ship method
	If Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") <> "" Then
		sShipMethod = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") = sProShipShipmethod
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN") = sShipMethod
	End If
	
	'Code calls function that translates international ship method to valid Proship ship method
	If Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") <> "" Then
		sShipMethod = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") = sProShipShipmethod
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN") = sShipMethod
	End If
	
	'Code populates CMS xml nodes and variables
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPDATE") = Shipment.E("/SHIPMENT/COMMON/SHIPDATE")
	iTotalShipmentCount				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")
	sBatchShipdate 					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPDATE")
	sBatchShipMethod 				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN")
	sBatchDepartment 				= Shipment.E("/SHIPMENT/CMS/CSTM_DEPARTMENT")
	sProductID						= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")
	sBatchInternationalShipMethod	= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN")
	sBatchItemQty					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")
	sBatchItemValue					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")

	'Code looks up product id in CSTM.Product table if operator picks a product code on batch screen
	If sProductID <> "" Then
		Call LookupProductCode(sProductID)
	End If
		
	'Code calls function that builds batch set-up XML file.
	Call BatchSAPBuildBatchSetupXML(sBatchSetupXML)
	
	'Code displays message to allow to cancel processing batch
	sWindowMessage = "You are about to process  " &  iTotalShipmentCount & "  Shipments for Batch  " & sBatchName & Vbcrlf & vbCrlf &_
					 "Shipping Date" & vbTab & vbTab & "=  " & sBatchShipDate & vbCrlf & _
					 "Domestic Ship-method" & vbTab & "=  " & sBatchShipMethod & vbCrlf & _
					 "Department" & vbTab & vbTab & "=  " & sBatchDepartment & vbCrlf & _
					 "International Ship-method" & vbTab & "=  " & sBatchInternationalShipMethod & vbCrlf & _	
					 "Product Code" & vbTab & vbTab & "=  " & sProductID & vbCrlf & _
					 "Item Qty" & vbTab & vbTab & vbTab & "=  " & sBatchItemQty & vbCrlf & _
					 "Item Value" & vbTab & vbTab & "=  " & sBatchItemValue & vbCrlf & vbCrlf & _
					 "Click YES to process batch." & vbCrlf & _
					 "Click NO  to exit batch process."
	sWindowButtons = vbQuestion+vbYesNo
	sWindowName = "Batch Shipment Count - Batch.BatchProcessFile"
	
	If vbNo = Msgbox(sWindowMessage,sWindowButtons,sWindowName) Then
		Exit Function
	End If	
	
	'Code builds query to read CSTM.batchinput table
	sQuery = "SELECT PackageID, InvoiceID, ShipperID, CustomerID, CustomerName, CustomerContact, CustomerAddress1, " & _
			 "CustomerAddress2, CustomerAddress3, CustomerCity, CustomerState, CustomerZip, CustomerCountry, " & _
			 "CustomerPhone, PurchaseOrder, CustomerShipMethod, InvoiceType, ResidentialFlag, PaymentTerms, " & _
			 "Package1Weight, Package1BoxType, Package1Dimensions, Package2Weight, Package2BoxType, Package2Dimensions, " & _
			 "Package3Weight, Package3BoxType, Package3Dimensions, Package4Weight, Package4BoxType, Package4Dimensions, " & _
			 "Package5Weight, Package5BoxType, Package5Dimensions, TotalSales, CustomerCharge, RecordType, MiscText1, " & _
			 "MiscText2, MiscText3, MiscText4, MiscText5, ProcessedFlag, ProcessedDate, ShipmentErrorMessage " & _
			 "FROM BatchInput " & _
			 "WHERE InvoiceID = '" & Trim(sBatchName) & "' " & _
			 "And ProcessedFlag = 'N' " & _ 
			 "Order By PackageID" 
			 
	'Code sends query to connection
	SET rsBatchInput = pCN.Execute(sQuery)
	
	'Code sets pointer to first record in record-set
	rsBatchInput.MoveFirst
	
	'Code builds/show progress bar
	ProgressBar True,iCurrrentPackage,0,iTotalPackageCount,"Batch Processing","Shipping...", True
	
	'Code loops through Batchinput record-set to process shipments in batch
	For iCurrentShipment = 1 To iTotalShipmentCount

		Cancelme = CancelMe + ProgressBar(True,B_Current)
		If CancelMe <> 0 Then 'If user presses cancel then stop
			ProgressBar False, 0
			Exit Function
		End If
		
		'Populates variable with SAP order number
		strDeliveryID = Trim(rsBatchInput.Fields("Packageid").value & "")
		sErrorMessage = ""
		
		'Code calls function that checks for duplicate shipments
		'Call CheckDuplicateIDReturnsError(strDeliveryID, sErrorMessage, blnOkToContinue)
		
		'Code updates shipment CSTM.BatchInput there is a duplicate shipment
		If blnOkToContinue = False _
			And Trim(sErrorMessage) <> "" Then

			Call BatchSAPUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)		
		
		Else
			'Code calls function that builds shipment xml that is processed by Proship
			Call BatchSAPBuildShipmentXML(sShipmentXML, sBatchSetupXML, rsBatchInput)
			
			'Code sets variable for Packageid to be used in rest of function
			sBatchPackageID = GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")    
			
			'SaveAsFile sShipmentXML, "C:\lp\ShipmentRequest.xml"
			
			'update progress bar - if a lock up occurs it can be isolated to here
			sMessage = "(Sending  " & B_RefNo & "  XML to Server)" 
			Cancelme = CancelMe + ProgressBar(True,B_Current ,,B_Count,, sMessage)
			
			'Send XML to Proship server
			sShipmentResponseXML = ServerQuery(sShipmentXML)	

			'SaveAsFile sShipmentresponseXML, "C:\lp\ShipmentResponse.xml"
			
			'Code checks for a successful Proship shipment. If <ERROR> found we update
			'CSTM.batchinput that shipments was bad and also log Proship error message
			If Instr(1,sShipmentResponseXML,"<ERROR>") > 0 Then

				'Code updates progress bar for operator
				sMessage = "(Updating  " & sBatchPackageID & "  as Bad Shipment)" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				'Code parse out data in XML Node <ERROR>
				sErrorMessage = CTrim(sShipmentResponseXML,4000)
				
				'Code calls function to update shipment in CSTM.BatchInput Table as bod and also
				'error message from Proship
				Call BatchSAPUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)

				'Code updates count for bad shipments in batch
				BadCount = BadCount + 1
				
			Else			
				'Code gets packages per shipment from SHIPMENTXML
				iPackagesPerShipment = GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")

				For iCurrentPackage = 1 To Cnum(iPackagesPerShipment)
				
					'Code updates progress bar for operator
					sMessage = "(Printing Label for  " & sBatchPackageID & "  )" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
				
					'Code calls function that sends each package label to printer
					Call BatchSAPPrintShippingLabel(sShipmentResponseXML, sShipmentXML, iCurrentPackage)
					
					'Code updates progress bar for operator
					sMessage = "(Inserting Shipment  " & sBatchPackageID & "  into CSTM.History  )" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
					
					'Code calls function that insert packages into CSTM.History
					Call BatchSAPUpdateHistory(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
										
					'Code calls function that figures out if shipment is for future
					'Call BatchSAPFigureIfFutureShipment(sShipmentXML, blnFutureShipmentFlag)
					
					blnFutureShipmentFlag = False
						
					'Code checks for future shipment and if future shipment calls function that 
					'inserts packages into CSTM.ProshipOutputFile.
					If blnFutureShipmentFlag = True Then
					
						'Code updates progress bar for operator
						sMessage = "(Inserting Future Shipment  " & sBatchPackageID & "  into CSTM.ProShipOutputFile  )" 
						Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
					
						Call BatchSAPUpdateProshipOutputFile(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
					End If
				Next
				
				'Code checks for future shipment and not future shipment calls function that 
				'builds file for customer ERP system.
				If blnFutureShipmentFlag = False Then
				
					'Code updates progress bar for operator
					sMessage = "(Creating output file for Shipment  " & sBatchPackageID & "  to customers ERP system  )" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
						
					Call BatchSAPUpdateSAPDelivery(sShipmentXML, sShipmentResponseXML)
				End If
				
				'Code updates progress bar for operator
				sMessage = "(Updating  " & sBatchPackageID & "  as Good Shipment)" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				'Code calls function that updates PackageId in CSTM>batchInputFile as successful shipment
				Call BatchSAPUpdateBatchInputFileGood(sShipmentXML)
				
			End If
		End If
		B_Current = B_Current + 1
		rsBatchInput.MoveNext
	Next
	
	'Code close Progress bar and dataset connection
	ProgressBar False, 0
	Set rsBatchInput = Nothing
	
End Function


Function BatchSAPDisplayBatchFiles(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to decide how many shipments
	' to process from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 		  		= ""
	sResponse 	  		= ""
	sCharacterLocation	= ""
	
	
	sQuery = "SELECT COUNT(1), InvoiceID FROM BatchInput " & _
	         "Where InvoiceID <> ' ' " & _
			 "And ProcessedFlag = 'N' " & _
		     "GROUP BY InvoiceID "

	Set rsBatchInputFile = pCN.Execute(sQuery)
	
	'Code builds list of future shipment days
	Do While Not rsBatchInputFile.EOF
	
		DaList = DaList & space(25) & _
				 rsBatchInputFile.Fields(1) & " (" & rsBatchInputFile.Fields(0) & " Packages)|"

		rsBatchInputFile.MoveNext
	Loop
	
	'Code closes record set
	rsBatchInputFile.Close
	
	'Code displays error message if no future shipments found
	If Len(DaList) = 0 Then
		sWindowMessage 	= "There are no Batch Shipments to Process"
		sWindowName 	= "No Shipments Found - BatchCustomerDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If
	
	'Code trims the last | off
	DaList = Left(DaList, Len(DaList)-1)
	
	'Code display the list and get a result
	sResponse = Ask_List(DaList,"Select Batch File for Processing",6000,"|",True,0,25)
	
	'Code exits function if operator doesn't pick a future shipment date
	If sResponse = "" Then 
		sWindowMessage 	= "Operation cancelled by operator." 
		sWindowName 	= "No Selection was made - BatchSAPDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If
	
	'Code finds batch name from item picked by operator
	If blnBatchFilePicked = True Then
		'Code finds "(" contained in response from daList.
		sCharacterLocation = Instr(1,sResponse,"(")

		'Code checks to see if "(" exists in response
		If sCharacterLocation > 0 Then
			'Code extracts shipments left to process
			iTotalPackageCount = Mid(sResponse, sCharacterLocation + 1,12)
			iTotalPackageCount = CNum(iTotalPackageCount)
			'Code extracts batch name from daList Response
			sBatchName = Trim(Mid(sResponse,1,sCharacterLocation - 1))
		End If
	End If
End Function


Function BatchSAPBuildBatchSetupXML(sBatchSetupXML)
	'========================================================================
	' This function builds Batch Set-up XML file that is used to tell Proship how to process
	' current batch file.
	'========================================================================
	
	'Code builds batch set-up XML file.
	sBatchSetupXML = "<BATCH_SETUP>"
	sBatchSetupXML = sBatchSetupXML & "<CMS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPDATE>" & Shipment.E("/SHIPMENT/COMMON/SHIPDATE") & "</CSTM_BATCH_SHIPDATE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DEPARTMENT>" & Shipment.E("/SHIPMENT/CMS/CSTM_DEPARTMENT") & "</CSTM_BATCH_DEPARTMENT>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPPERID>" & Shipment.E("/SHIPMENT/CMS/CSTM_SHIPPERID") & "</CSTM_BATCH_SHIPPERID>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_USERNAME>" & Shipment.E("/SHIPMENT/CMS/CSTM_USERNAME") & "</CSTM_BATCH_USERNAME>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_WORKSTATIONID>" & Shipment.E("/SHIPMENT/CMS/CSTM_USERTEXT1") & "</CSTM_BATCH_WORKSTATIONID>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPMENTS_TO_PROCESS>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS") & "</CSTM_BATCH_SHIPMENTS_TO_PROCESS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DOMESTIC_SHIPMETHOD>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") & "</CSTM_BATCH_DOMESTIC_SHIPMETHOD>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_INTERNATIONAL_SHIPMETHOD>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") & "</CSTM_BATCH_INTERNATIONAL_SHIPMETHOD>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PRODUCT_CODE>" & Shipment.E("/SHIPMENT/CMS/BATCH_PRODUCT_CODE") & "</CSTM_BATCH_PRODUCT_CODE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PRODUCT_DESCRIPTION>" & Shipment.E("/SHIPMENT/CMS/PRODUCT/LINE/CSTM_CI_DESCRIPTION") & "</CSTM_BATCH_PRODUCT_DESCRIPTION>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_ITEM_QTY>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY") & "</CSTM_BATCH_ITEM_QTY>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_ITEM_VALUE>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE") & "</CSTM_BATCH_ITEM_VALUE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_NAME>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") & "</CSTM_BATCH_NAME>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_RESIDENTIAL_FLAG>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG") & "</CSTM_BATCH_RESIDENTIAL_FLAG>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN") & "</CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN") & "</CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PAYMENT_TERMS>" & Shipment.E("/SHIPMENT/COMMON/TERMS") & "</CSTM_BATCH_PAYMENT_TERMS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PACKAGING_TYPE>" & Shipment.E("/SHIPMENT/PACKAGE/PACKAGING") & "</CSTM_BATCH_PACKAGING_TYPE>"
	sBatchSetupXML = sBatchSetupXML & "</CMS>"
	sBatchSetupXML = sBatchSetupXML & "</BATCH_SETUP>"
	
	'SaveAsFile sBatchSetupXML, "C:\lp\Batch Setup.xml",True	

End Function


Function BatchSAPBuildShipmentXML(sShipmentXML, sBatchSetupXML, rsBatchInput)
	'========================================================================
	' This function builds shipment XML that is sent to Proship server for shipping.
	'========================================================================
	
	'Code sets variables
	sPackageNode 				= ""
	sCommonNode 				= ""
	sCMSNode					= ""
	sBatchPrinterSetting		= ""
	sBatchShipmethod			= ""
	sBatchPSLRFormat			= ""
	sBatchDestinationPrinter	= ""
	iPackagesPerShipment		= 0
	
	'Code populates variables from rsBatchInput record-set
	sBatchPackageID 			= Trim(rsBatchInput.Fields("Packageid").value & "")
	sBatchInvoiceID 			= Trim(rsBatchInput.Fields("Invoiceid").value & "")
	sBatchShipperID 			= Trim(rsBatchInput.Fields("Shipperid").value & "")
	sBatchCustomerID 			= Trim(rsBatchInput.Fields("CustomerID").value & "")
	sBatchCustomerName 			= Trim(rsBatchInput.Fields("CustomerName").value & "") 
	sBatchCustomerContact 		= Trim(rsBatchInput.Fields("CustomerContact").value & "")
	sBatchCustomerAddress1 		= Trim(rsBatchInput.Fields("CustomerAddress1").value & "")
	sBatchCustomerAddress2 		= Trim(rsBatchInput.Fields("CustomerAddress2").value & "")
	sBatchCustomerCity 			= Trim(rsBatchInput.Fields("CustomerCity").value & "")
	sBatchCustomerState 		= Trim(rsBatchInput.Fields("CustomerState").value & "")
	sBatchCustomerZip 			= Left(rsBatchInput.Fields("CustomerZip").value & "",5)
	sBatchCustomerCountry 		= Trim(rsBatchInput.Fields("CustomerCountry").value & "")
	sBatchCustomerPhone 		= Trim(rsBatchInput.Fields("CustomerPhone").value & "")
	sBatchPurchaseOrder 		= Trim(rsBatchInput.Fields("PurchaseOrder").value & "")
	sBatchResidentialFlag 		= Trim(rsBatchInput.Fields("ResidentialFlag").value & "")
	sBatchPaymentTerms 			= Trim(rsBatchInput.Fields("PaymentTerms").value & "")	
	sBatchPackage1Weight 		= Trim(rsBatchInput.Fields("Package1Weight").value & "")
	sBatchPackage1BoxType 		= Trim(rsBatchInput.Fields("Package1BoxType").value & "")
	sBatchPackage1Dimensions 	= Trim(rsBatchInput.Fields("Package1Dimensions").value & "")
	sBatchPackage2Weight 		= Trim(rsBatchInput.Fields("Package2Weight").value & "")
	sBatchPackage2BoxType 		= Trim(rsBatchInput.Fields("Package2BoxType").value & "")
	sBatchPackage2Dimensions 	= Trim(rsBatchInput.Fields("Package2Dimensions").value & "")
	sBatchPackage3Weight 		= Trim(rsBatchInput.Fields("Package3Weight").value & "")
	sBatchPackage3BoxType 		= Trim(rsBatchInput.Fields("Package3BoxType").value & "")
	sBatchPackage3Dimensions 	= Trim(rsBatchInput.Fields("Package3Dimensions").value & "")
	sBatchPackage4Weight 		= Trim(rsBatchInput.Fields("Package4Weight").value & "")
	sBatchPackage4BoxType 		= Trim(rsBatchInput.Fields("Package4BoxType").value & "")
	sBatchPackage4Dimensions 	= Trim(rsBatchInput.Fields("Package4Dimensions").value & "")
	sBatchPackage5Weight 		= Trim(rsBatchInput.Fields("Package5Weight").value & "")
	sBatchPackage5BoxType 		= Trim(rsBatchInput.Fields("Package5BoxType").value & "")
	sBatchPackage5Dimensions 	= Trim(rsBatchInput.Fields("Package5Dimensions").value & "")
	sBatchTotalSales 			= Trim(rsBatchInput.Fields("TotalSales").value & "")
	sBatchCustomerCharge 		= Trim(rsBatchInput.Fields("CustomerCharge").value & "")
	sBatchRecordType		 	= Trim(rsBatchInput.Fields("RecordType").value & "")	
	sBatchMiscText1			 	= Trim(rsBatchInput.Fields("MiscText1").value & "")
	sBatchMiscText2			 	= Trim(rsBatchInput.Fields("MiscText2").value & "")
	sBatchMiscText3			 	= Trim(rsBatchInput.Fields("MiscText3").value & "")
	sBatchMiscText4			 	= Trim(rsBatchInput.Fields("MiscText4").value & "")
	sBatchMiscText5			 	= Trim(rsBatchInput.Fields("MiscText5").value & "")
	
	'Code populates variables from sBatchsetupXML 
	sBatchServiceDomestic 					= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")      
	sBatchServiceInternational				= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
	sBatchDepartment						= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DEPARTMENT")
	sBatchUserID 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_SHIPPERID")
	sBatchUserName 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_USERNAME")
	sBatchWorkstationID 					= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_WORKSTATIONID")
	sBatchShipDate 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_SHIPDATE")
	sBatchDomesticCustomerShipmethod		= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN")
	sBatchInternationalCustomerShipmethod	= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN")
	
	'Code populates miscellaneous variables
	sBatchInterface = "BATCH"
	sBatchPackaging = GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_PACKAGING_TYPE")
		
	'Code populates International variables
	If sBatchCustomerCountry = "US" _
		Or sBatchCustomerCountry = " " Then
	Else
		sBatchCIMethod 				= "0"
		sBatchSenderEIN 			= "84-1130457"
		sBatchDescription 			= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_PRODUCT_DESCRIPTION")
		sBatchSEDMethod 			= "0"  'No SED Required
		sBatchExportReason 			= "Sale"
		sBatchAESFilingStatus 		= "S"	'Shipper
		sBatchCurrencyRate 			= "USD"	'US Dollars
		sBatchConsigneeCountry		= UCase(Trim(rsBatchInput.Fields("CustomerCountry").value & ""))
		sBatchFSTRExemptionNumber	= ""
		sBatchLicenseNumber 		= "NLR"
		sBatchInternationalTerms 	= "DDP"
		sTotalInvoiceAmount			= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_ITEM_VALUE")
		
		'Codes sets Exemption number for FedEx shipments going to Canada.
		If UCase(Trim(sBatchCustomerCountry)) = "CA" Then	
			sFSTRExemptionNumber = "FTR 30.58"
		Else
			'sFSTRExemptionNumber = "FTR 30.55(h)"
		End If
	End If
	
	
	'Code sets service depending upon country code from batchinput table
	If sBatchCustomerCountry = "US" _
		Or sBatchCustomerCountry = " " Then
		sBatchShipmethod   = sBatchServiceDomestic 
		sBatchShipmethodIn = sBatchDomesticCustomerShipmethod
	Else
		sBatchShipmethod   = sBatchServiceInternational
		sBatchShipmethodIn = sBatchInternationalCustomerShipmethod
	End If
	
	'Code figures out total number of packages for each shipment based upon
	'number of package weight fields populated in CSTM.BatchInput table
	If CNum(sBatchPackage1Weight) > 0 Then
		iPackagesPerShipment = 1
	End If
	
	If CNum(sBatchPackage2Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage3Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage4Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage5Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
		
	'Code calls function that figures out printer settings for shipment being used.
	Call BatchSAPFindPrinterSetting(sBatchShipmethod, sBatchPSLRFormat, sBatchDestinationPrinter)
	
	'Build Common nodes for Proship
	sCommonNode = "<COMMON>" 
	sCommonNode = sCommonNode &	"<SHIPDATE>" & sBatchShipDate & "</SHIPDATE>" 
	sCommonNode = sCommonNode &	"<TERMS>" & sBatchPaymentTerms & "</TERMS>" 
	sCommonNode = sCommonNode &	"<SHIPPER_REFERENCE>" & sBatchPackageID & "</SHIPPER_REFERENCE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CODE>" & Trim(sBatchCustomerID) & "</CONSIGNEE_CODE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_COMPANY>" & Trim(sBatchCustomerName) & "</CONSIGNEE_COMPANY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CONTACT>" & Trim(sBatchCustomerContact) & "</CONSIGNEE_CONTACT>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS1>" & Trim(sBatchCustomerAddress1) & "</CONSIGNEE_ADDRESS1>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS2>" & Trim(sBatchCustomerAddress2) & "</CONSIGNEE_ADDRESS2>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CITY>" & Trim(sBatchCustomerCity) & "</CONSIGNEE_CITY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_STATE>" & Trim(sBatchCustomerState) & "</CONSIGNEE_STATE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_POSTALCODE>" & Trim(sBatchCustomerZip) & "</CONSIGNEE_POSTALCODE>" 
	sCommonNode = sCommonNode & "<CONSIGNEE_COUNTRY>" & sBatchCustomerCountry & "</CONSIGNEE_COUNTRY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_PHONE>" & sBatchCustomerPhone & "</CONSIGNEE_PHONE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_REFERENCE>" & sBatchPurchaseOrder  & "</CONSIGNEE_REFERENCE>" 
	sCommonNode = sCommonNode &	"<SHIPPER>" & sBatchShipperID & "</SHIPPER>" 
	
	'Code populates residential flag in Proship if set on
	If UCase(sBatchResidentialFlag) = "Y" Then
		sCommonNode = sCommonNode &	"<CONSIGNEE_RESIDENTIAL>True</CONSIGNEE_RESIDENTIAL>"
	End If	

	'Code populates Proship common international nodes
	If sBatchCustomerCountry <> "US" _
		And sBatchCustomerCountry <> " " Then
		
		sCommonNode = sCommonNode &	"<CI_METHOD>" & sBatchCIMethod  & "</CI_METHOD>" 
		sCommonNode = sCommonNode &	"<DECLARED_VALUE_CUSTOMS>" & sTotalInvoiceAmount  & "</DECLARED_VALUE_CUSTOMS>" 
		sCommonNode = sCommonNode &	"<FSTR_EXEMPTION_NO>" & sFSTRExemptionNumber  & "</FSTR_EXEMPTION_NO>" 
		'sCommonNode = sCommonNode &	"<DESCRIPTION>" & sBatchCIMethod  & "</DESCRIPTION>" 
		sCommonNode = sCommonNode &	"<SENDER_EIN>" & sBatchSenderEIN  & "</SENDER_EIN>" 
		sCommonNode = sCommonNode &	"<RATE_CURRENCY>" & sBatchCurrencyRate  & "</RATE_CURRENCY>" 
		sCommonNode = sCommonNode &	"<ULTIMATE_DESTINATION_COUNTRY>" & sBatchConsigneeCountry  & "</ULTIME_DESTINATION_COUNTRY>" 
		sCommonNode = sCommonNode &	"<DOCUMENTS_ONLY></DOCUMENTS_ONLY>" 
		sCommonNode = sCommonNode &	"<PARTIES_RELATED></PARTIES_RELATED>" 
		sCommonNode = sCommonNode &	"<EXPORT_REASON>" & sBatchExportReason  & "</EXPORT_REASON>" 
		sCommonNode = sCommonNode &	"<AES_TRANSACITON_NUMBER></AES_TRANSACTION_NUMBER>" 
		sCommonNode = sCommonNode &	"<PORT_OF_EXPORT></PORT_OF_EXPORT>" 
		sCommonNode = sCommonNode &	"<CONVEYANCE_CODE>UPS</CONVEYANCE_CODE>" 
		sCommonNode = sCommonNode &	"<WEIGHT_UOM>LBS</WEIGHT_UOM>" 
		sCommonNode = sCommonNode &	"<SED_METHOD>" & sBatchSEDMethod  & "</SED_METHOD>" 
		sCommonNode = sCommonNode &	"<AES_FILING_STATUS>" & sBatchAESFilingStatus  & "</AES_FILING_STATUS>" 
		
	End If

		'Detail line item
		'sBatchLicenseNumber 		= "NLR"
	
	sCommonNode = sCommonNode &	"<PSLR_FORMAT_CODE>" & sBatchPSLRFormat & "</PSLR_FORMAT_CODE>" 
	sCommonNode = sCommonNode &	B_L_Req
	sCommonNode = sCommonNode &	"</COMMON>"	
	
	'Code build Package 1 nodes for Proship if weight found
	If Cnum(sBatchPackage1Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage1Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage1Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage1Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage1BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage1BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		sPackageNode = sPackageNode & "</PACKAGE>"
	End If
	
	'Code build Package 2 nodes for Proship if weight found
	If Cnum(sBatchPackage2Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage2Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage2Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage2Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage2BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage2BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If
	
	'Code build Package 3 nodes for Proship if weight found
	If Cnum(sBatchPackage3Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage3Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage3Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage3Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage3BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage3BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If
	
	'Code build Package 4 nodes for Proship if weight found
	If Cnum(sBatchPackage4Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage4Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage4Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage4Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage4BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage4BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If

	'Code build Package 5 nodes for Proship if weight found
	If Cnum(sBatchPackage5Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage5Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage5Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage5Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage5BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage5BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If

	'Code builds CMS nodes for Shipment XML
	sCMSNode = sCMSNode & "<CMS>"
	sCMSNode = sCMSNode & "<CSTM_CUSTOMER_SHIPMETHOD_IN>" & sBatchShipmethodIn   & "</CSTM_CUSTOMER_SHIPMETHOD_IN>" 
	sCMSNode = sCMSNode & "<CSTM_INTERFACE>" & sBatchInterface & "</CSTM_INTERFACE>" 
	sCMSNode = sCMSNode & "<CSTM_SALES_ORDER>" & sBatchInvoiceID  & "</CSTM_SALES_ORDER>" 
	sCMSNode = sCMSNode & "<CSTM_PO_NUMBER>" & sBatchPurchaseOrder  & "</CSTM_PO_NUMBER>" 
	sCMSNode = sCMSNode & "<CSTM_DEPARTMENT>" & sBatchDepartment  & "</CSTM_DEPARTMENT>"
	sCMSNode = sCMSNode & "<CSTM_SHIPPERID>" & sBatchUserID  & "</CSTM_SHIPPERID>"
	sCMSNode = sCMSNode & "<CSTM_USERNAME>" & sBatchUserName  & "</CSTM_USERNAME>"
	sCMSNode = sCMSNode & "<CSTM_WORKSTATIONID>" & sBatchWorkstationID  & "</CSTM_WORKSTATIONID>"
	sCMSNode = sCMSNode & "<CSTM_CUSTOMER_SHIPMETHOD_OUT>" & sBatchShipmethodIn   & "</CSTM_CUSTOMER_SHIPMETHOD_OUT>"
	sCMSNode = sCMSNode & "<CSTM_PACKAGES_PER_SHIPMENT>" & iPackagesPerShipment   & "</CSTM_PACKAGES_PER_SHIPMENT>"
	sCMSNode = sCMSNode & "<SAP_TABLES>"
	sCMSNode = sCMSNode & "<DELIVERY_HEAD>"
	sCMSNode = sCMSNode & "<SALES_ORGANIZATION>" & sBatchMiscText1 & "</SALES_ORGANIZATION>"
	sCMSNode = sCMSNode & "<INVOICE_CODE>" & sBatchMiscText2 & "</INVOICE_CODE>"
	sCMSNode = sCMSNode & "</DELIVERY_HEAD>"
	sCMSNode = sCMSNode & "</SAP_TABLES>"
	sCMSNode = sCMSNode & "</CMS>"
					 
	'Build The Shipment XML for Proship server
	sShipmentXML = "<SHIPMENT ACTION=""SHIP"">" & _ 
					sCommonNode & _
					sPackageNode & _
					sCMSNode & _
					"<SERVICE>" & sBatchShipmethod & "</SERVICE>" & _
				   "</SHIPMENT>"
End Function


Function BatchSAPFindPrinterSetting(sBatchShipmethod, sBatchPSLRFormat, sBatchDestinationPrinter)
	'========================================================================
	' This function reads Proship system XML to find printer settings at station.
	'========================================================================
	
	If Left(Trim(sBatchShipmethod),12) = "BWTI_UPS.UPS" Then
		'Code gets ProShip printer set-up from client station for UPS label 
		sBatchPSLRFormat = "UPS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/STOCK")) & "|" _	  
		    & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for USPS label
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_USPS.USPS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "USPS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/STOCK")) & "|" _
		    & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for Endicia USPS label
	ElseIf Left(Trim(sBatchShipmethod),8) = "ELS.USPS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "USPS_IBI_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/DESTINATION"))

			'sBatchPSLRFormat = "USPS_IBI_FLAT|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/PRINTER")) & "|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/STOCK")) & "|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/DESTINATION"))

			
	'Shipping station label configuration for FedEx Express label	
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_FXRS.FXRS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for FedEx Ground label	
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_FXRS.CAFE" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for MSI Standard Label	
	ElseIf Trim(sBatchShipmethod) = "BWTI_LTL.LTL.MSISTANDARD" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/DESTINATION"))			
	End If

End Function


Function BatchSAPUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to decide how many shipments
	' to process from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	sBatchPackageID	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	
	sQuery = "Update BatchInput Set ProcessedFlag = '2', " & _
			 "ShipmentErrorMessage = '" & sErrorMessage & "' " & _
			 "Where PackageID = '" & sBatchPackageID & "'"

	On Error Resume Next
	Set rsBatchInputUpdate = pCN.Execute(sQuery)
	
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		'Code displays error number and error description if error when reading CSTM(Warehouse) database
		sWindowMessage = "Received Error Updating PackageId  " & UCASE(sBatchPackageID) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
				   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
				   "Shipment " & UCASE(sBatchPackageID) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
				   "Please Report Problem to IT Department"
		sWindowName = "Batch.BatchSAPUpdateBatchInputFileBad"
		sWindowButtons = vbCritical + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName
	End If
	
	'Code empties record set
	Set rsBatchInputUpdate = Nothing
	
End Function


Function BatchSAPPrintShippingLabel(sShipmentResponseXML, sShipmentXML, iCurrentPackage)
	'========================================================================
	' This function sends carrier shipping label to destination printer used by operator
	' processing batch.
	'========================================================================
	
	'Code sets variables
	sShippingLabel 				= ""
	iPeriodLocation 			= 0
	sBatchCarrierService		= ""
	sBatchDestinationPrinter	= ""
	sBatchShipmethod 			= GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	sLabelFormatCode			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/PSLR_FORMAT_CODE")
	sPackagingType				= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE/PACKAGING")
	
	'Code removes service level from Proship ship method
	iPeriodLocation = InstrRev(sBatchShipmethod,".")
	sBatchCarrierService = Mid(sBatchShipmethod,1,iPeriodLocation - 1)
	
	'Code splits printer destination from label format code
	Fieldz = Split(sLabelFormatCode,"|")
	sBatchDestinationPrinter = Fieldz(3)
	
	'Get Label Image of each package in shipment from ShipmentResponseXML
	Select Case Trim(sBatchCarrierService)
		Case "BWTI_DHL.DHL"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/DHL_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "BWTI_FXRS.FXRS","BWTI_FXRS.CAFE"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/FXRS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "BWTI_UPS.UPS","BWTI_UPS.MI"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/UPS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
			'Code builds string of fields to add to shipping label
			sLabelEndString			= "^XZ"
			strBoxType = GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/CSTM_BOXTYPE")
			strDatetext = "^FO600,1100^A0N,45,0^FD" & GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE") & "^FS"
			
			'Code adds ship date and box type to button of UPS label if populated
			If strBoxType <> "" Then
				strText = strDatetext & vbCrlf & "^FO350,1150^A0N,51,0^FDDISPLAY : " & strBoxType & "^FS" & vbCrLf & sLabelEndString
				sShippingLabel = Replace(sShippingLabel,sLabelEndString,strText)
			Else
				strText = strDatetext & vbCrlf & sLabelEndString
				sShippingLabel = Replace(sShippingLabel,sLabelEndString,strText)
			End If	

		Case "BWTI_USPS.USPS"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "ELS.USPS"
			If sPackagingType = "PAK" Then
				sShippingLabel= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_IBI_FLAT")
				sShippingLabel = B64_Decode(sShippingLabel)		
			Else
				sShippingLabel= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_IBI_LABEL")
				sShippingLabel = B64_Decode(sShippingLabel)
			End If
	End Select
	
	'Code decides how to send label/document to printer set-up in Proship client
	Select Case UCase(Left(sBatchDestinationPrinter,2))
		Case "WP"
			'Code sends carrier label to windows printer set-up at shipping station
			sError = SendToWinPrinter (Mid(sBatchDestinationPrinter,5,40), sShippingLabel)
			SaveAsfile sError,"C:\errormessage.txt"
			
		Case "\\", "LP", "C:"
			'Code sends carrier label local printer, shared, network printer
			SaveAsFile sShippingLabel,sBatchDestinationPrinter
	End Select

	'Code pauses execution of batch to give printer time to keep up with printing labels.
	Pause 1	
	
End Function


Function BatchSAPUpdateBatchInputFileGood(sShipmentXML)
	'========================================================================
	' This function updates CSTM.BatchInputfile that shipments was successful and date 
	' that shipment was processed by batch.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	sBatchPackageID	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	sProcessed 		= Celse(Now,"yyyy-mm-dd")
					
	sQuery = "Update BatchInput Set ProcessedFlag = 'Y', ProcessedDate = '" & sProcessed & "', " & _
			 "ShipmentErrorMessage = Null " & _
			 "Where PackageID = '" & sBatchPackageID & "'"

	On Error Resume Next
	Set rsBatchInputUpdate = pCN.Execute(sQuery)
	
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		'Code displays error number and error description if error when reading CSTM(Warehouse) database
		sWindowMessage = "Received Error Updating PackageId  " & UCASE(sBatchPackageID) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
				   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
				   "Shipment " & UCASE(sBatchPackageID) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
				   "Please Report Problem to IT Department"
		sWindowName = "Batch.BatchSAPUpdateBatchInputFileGood"
		sWindowButtons = vbCritical + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName
	End If
	
	'Code empties record-set
	Set rsBatchInputUpdate = Nothing
	
End Function


Function BatchSAPUpdateHistory(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
	'========================================================================
	' This function inserts shipments into CSTM.History table.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	OriginZip 		= ""
	CurrentShipper	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER")
	ProShipCarrier	= GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	
	
	'Code sets variables for CSTM.History
	sBatchPackageID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	sBatchInvoiceID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_SALES_ORDER")
	sBatchShipperID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER")
	sBatchCustomerID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CODE")
	sBatchCustomerName 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_COMPANY") 
	sBatchCustomerContact 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CONTACT")
	sBatchCustomerAddress1 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_ADDRESS1")
	sBatchCustomerAddress2 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_ADDRESS2")
	sBatchCustomerAddress3		= ""
	sBatchCustomerCity 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CITY")
	sBatchCustomerState 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_STATE")
	sBatchCustomerZip 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_POSTALCODE")
	sBatchCustomerCountry 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_COUNTRY")
	sBatchCustomerPhone 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_PHONE")
	sBatchOriginCompany			= ""
	sBatchCustomerShipmethodIn 	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_IN")
	sBatchCustomerShipmethodOut	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")	
	sBatchOperator				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_SHIPPERID")
	sBatchPSVoidID				= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[1]/PS_VOID_ID")
	sBatchTotalPackages			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")
	sBatchResidentialFlag		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_RESIDENTIAL")
	sBatchZone					= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/ZONE")
	sBatchBilledWeight			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/RATED_WEIGHT")
	sBatchActualWeight			= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/WEIGHT")
	sBatchTrackingNumber		= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/TRACKING_NUMBER")
	sBatchFuelSurcharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/FUEL_SURCHARGE")
	sBatchBaseCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")
	sBatchTotalCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/TOTAL")
	sBatchSpecialCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/SPECIAL")
	sBatchPONumber				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PO_NUMBER")
	sBatchDepartment			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_DEPARTMENT")
	sBatchPackageDimensions		= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/DIMENSION")
	sBatchPackageType			= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/PACKAGING")
	sBatchPaymentTerms			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/TERMS")
	sBatchInterface				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_INTERFACE")
	sBatchStationID				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_WORKSTATIONID")
	sBatchUserText2				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/INVOICE_CODE")
	sBatchUserText3				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/SALES_ORGANIZATION")
	
	'Code sets residential flag
	If sBatchResidentialFlag = "True" Then
		sBatchResidentialFlag = "Y"
	Else
		sBatchResidentialFlag = "N"
	End If
	
	'Code calls function that find zip code of shipper
	Call FindOriginZip (CurrentShipper, OriginZip)
	
	'Code calls function to parse out carrier and service from Proship service field.
	Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)	

	'Code coverts ProShip Carrier FXRS and CAFE to FEDEX in CSTM(History) Table.
	If UCase(Trim(CarrierName)) = "FXRS" _
		Or UCase(Trim(CarrierName)) = "CAFE" Then
		CarrierName = "FEDEX"
	End If
	
	'Code calls function that formats date & time into correct format for ship date
	PackageShipmentDate = CElse(Date(),"yyyy-mm-dd")
	Call FormatShipmentDateTime(PackageShipmentDate, PackageShipmentDateTime)
		
	'Code calls function that formats date & time into correct format for manifest date
	PackageManifestDate = CElse(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE"),"yyyy-mm-dd")
	Call FormatManifestDateTime(PackageManifestDate, PackageManifestDateTime)
	
	'Code blanks out charge fields on multiple package shipment
	If CNum(iCurrentPackage) > 1 Then
		sBatchBaseCharge 	= "0.00"
		sBatchTotalCharge 	= "0.00"
		sBatchSpecialCharge	= "0.00"
		sBatchFuelSurcharge = "0.00"
	End If
		
	sQuery = "Insert into history set "

	sQuery = sQuery & "PackageId= '" & sBatchPackageID & "', "   'PackageID 
	sQuery = sQuery & "Invoicenumber= '" & sBatchInvoiceID & "', "		'Invoice Number
	sQuery = sQuery & "OriginZip = '" & OriginZip & "', "	
	sQuery = sQuery & "OriginCompany = '" & sBatchOriginCompany & "', "
	sQuery = sQuery & "Shipper = '" & CurrentShipper & "', "	
	sQuery = sQuery & "ConsigneeNumber = '" & sBatchCustomerID & "',"   	
	sQuery = sQuery & "ConsigneeCompany = '" & sBatchCustomerName & "',"  
	sQuery = sQuery & "ConsigneeContact = '" & sBatchCustomerContact & "'," 		
	sQuery = sQuery & "ConsigneeAddress1= '" & sBatchCustomerAddress1 & "',"  
	sQuery = sQuery & "ConsigneeAddress2= '" & sBatchCustomerAddress2 & "'," 
	sQuery = sQuery & "ConsigneeAddress3= '" & sBatchCustomerAddress3 & "',"  
	sQuery = sQuery & "ConsigneeCity = '" & sBatchCustomerCity & "',"   
	sQuery = sQuery & "ConsigneeState = '" & sBatchCustomerState & "',"   
	sQuery = sQuery & "ConsigneeZip = '" & sBatchCustomerZip & "',"   
	sQuery = sQuery & "ConsigneePhone = '" & sBatchCustomerPhone & "',"   
	sQuery = sQuery & "CountryCode = '" & sBatchCustomerCountry  & "', "	
	'sQuery = sQuery & "ConsigneeBillTo = ' ', "  
	sQuery = sQuery & "ProshipCarrier ='" & ProShipCarrier & "', "   
	sQuery = sQuery & "CustomerShipMethodIn = '" & sBatchCustomerShipmethodIn & "', "  
	sQuery = sQuery & "CustomerShipMethodOut ='" & sBatchCustomerShipmethodOut & "', "	
	sQuery = sQuery & "Carrier ='" & CTrim(Carriername,25)  & "', "	
	sQuery = sQuery & "Class ='" & CTrim(CarrierService,30)  & "', "		
	sQuery = sQuery & "Operator =  '" & sBatchOperator & "',"  
	'sQuery = sQuery & "Picker = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PICKER"),20) & "',"   
	'sQuery = sQuery & "Packer = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PACKER"),20) & "',"  
	sQuery = sQuery & "PSVoidID =  '" & sBatchPSVoidID & "', "
	sQuery = sQuery & "MAXBOX = " & sBatchTotalPackages & ", "
	sQuery = sQuery & "CURBOX =  " & iCurrentPackage & ", "
	sQuery = sQuery & "Residential = '" & sBatchResidentialFlag  & "', "	
	sQuery = sQuery & "Zone = '" & sBatchZone & "', "	
	sQuery = sQuery & "BilledWeight = " & CNum(sBatchBilledWeight) & ", "	
	sQuery = sQuery & "ActualWeight = " & CNum(sBatchActualWeight) & ", "
	sQuery = sQuery & "TrackingNumber = '" & sBatchTrackingNumber & "', " 
	sQuery = sQuery & "ShipDate = '" & PackageShipmentDateTime & "', " 
	sQuery = sQuery & "ManifestDate = '" & PackageManifestDateTime	& "', "	
	sQuery = sQuery & "FuelSurcharge = " & CNum(sBatchFuelSurcharge) & ", " 
	sQuery = sQuery & "BaseCharge = " & CNum(sBatchBaseCharge) & ", "
	'sQuery = sQuery & "CodAmount = " & CNum(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage  & "]/COD_AMOUNT")) & ", " 
	'sQuery = sQuery & "CodFee = " & CNum(GetNodeValue(SR, "/SHIPMENT/COMMON/COD_FEE")) & ", "  
	'sQuery = sQuery & "CODPaymentMethod = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage & "]/COD_PAYMENT_METHOD"),50) & "', "
	sQuery = sQuery & "TotalCharge  = " & CNum(sBatchTotalCharge) & ", "
	sQuery = sQuery & "Special  = " & CNum(sBatchSpecialCharge) & ", "		
	sQuery = sQuery & "PLDReference1 = '" & sBatchPackageID & "', "	
	sQuery = sQuery & "PLDReference2 = '" & sBatchPONumber & "', "
	sQuery = sQuery & "PONumber = '" & sBatchPONumber & "', " 
					
	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_COMPANY"),40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBCompany = '" & myField & "', "	

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CONTACT"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBContact = '" & myField & "', "	

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS1"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBAddress = '" & myField & "', "		

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS2"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBAddress2 = '" & myField & "', "					

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CITY"),25)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBCity = '" & myField & "', "		

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_STATE"), 20)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBState = '" & myField  & "', "			

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_POSTALCODE"), 20)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBZip = '" & myField & "', "	

	sQuery = sQuery & "Dimensions = '" & sBatchPackageDimensions & "', "
	sQuery = sQuery & "Department = '" & sBatchDepartment & "', "
	sQuery = sQuery & "PackageType = '" & sBatchPackageType & "', "	
	sQuery = sQuery & "PaymentType =  '" & sBatchPaymentTerms & "', "
	sQuery = sQuery & "Interface = '" & sBatchInterface & "', "
	sQuery = sQuery & "UserText1 = '" & sBatchStationID & "', "	
	sQuery = sQuery & "UserText2 = '" & sBatchUserText2 & "', "
	sQuery = sQuery & "UserText3 = '" & sBatchUserText3 & "', "
	sQuery = sQuery & "UserText4 = '', "
	sQuery = sQuery & "UserText5 = '', "
	sQuery = sQuery & "UserNumber1 = '0.00', "
	sQuery = sQuery & "UserNumber2 = '0.00', "
	sQuery = sQuery & "UserNumber3 = '0.00', "
	sQuery = sQuery & "UserNumber4 = '0.00', "
	sQuery = sQuery & "UserNumber5 = '0.00' "
	
	On Error Resume Next
	Set rsHistory = pCN.Execute(sQuery,RecordsAffected)	

	If Err.Number <> 0 Then
		'Code displays error number and error description if error when creating datbase
		strErrorMessage = Err.Number & "  " & Err.Description 
		strWindowName = "Batch.BatchSAPUpdateHistory"
		strWindowButtons = vbCritical + vbOkOnly
		MsgBox strErrorMessage,strWindowButtons,strWindowName
		
	End If	

	'Code empties recordset
	Set rsHistory = Nothing
	
End Function
	
	
Function BatchSAPUpdateProshipOutputFile(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
	'========================================================================
	' This functions adds shipments to CSTM(ProShipOutputFile) table to handle all future
	' shipments.
	'========================================================================
	
	'Code sets variables
	sQuery = ""
	
	'Code calls function to parse out carrier and service from Proship service field.
	ProShipCarrier = GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)

	'Code sets variables for MySQL insert statement
	sWarehouseCode 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER")
	sDeliveryID    			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	sShipmentDate  			= Celse(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE"),"MM/DD/YYYY")
	sStatus					= "SAVE" 
	sLicensePlate			= ""
	sShipVia				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")
	sCarrier				= CarrierName
	sSCAC					= ""
	iTotalWeight			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/RATED_WEIGHT")
	iTotalBase				= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")
	iTotalSpecial			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/SPECIAL")
	iTotalDeclaredValue		= 0.00
	iTotalPrice				= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/TOTAL")
	iTotalContainers		= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")
	iCurrentContainer		= iCurrentPackage
	sMasterTrackingNumber	= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[1]/PS_VOID_ID")
	sTrackingNumber			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/TRACKING_NUMBER")
	iPackageWeight			= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/WEIGHT")
	iPackageBase			= 0.00
	iPackageHandlingFee 	= 0.00
	iPackagePrice 			= 0.00
	sUCCNumber 				= ""   
	sTrackingIndicator 		= ""   
	sTrailerNumber 			= ""
	sLane 					= ""	
	sTerms 					= "S"
	sBillingAccount 		= ""		
	sCustomerUpdated 		= "N"
	
	'MySQL insert statement
	sQuery = "Insert into ProshipOutputFile set "
	sQuery = sQuery & "WarehouseCode = '" & sWarehouseCode & "', "	
	sQuery = sQuery & "DeliveryID = '" & sDeliveryID & "', "
	sQuery = sQuery & "ShipmentDate = '" & sShipmentDate & "', "
	sQuery = sQuery & "Status = '" & sStatus & "', "
	sQuery = sQuery & "LicensePlate = '" & sLicensePlate & "', "	
	sQuery = sQuery & "ShipVia = '" & sShipVia & "', "
	sQuery = sQuery & "Carrier = '" & sCarrier & "',"   	
	sQuery = sQuery & "SCAC = '" & sSCAC & "',"  
	sQuery = sQuery & "TotalWeight = " & iTotalWeight & "," 
	sQuery = sQuery & "TotalBase = " & iTotalBase & ", "
	sQuery = sQuery & "TotalSpecial = " & iTotalSpecial & ", "
	sQuery = sQuery & "TotalDeclaredValue = " & iTotalDeclaredValue & ", "
	sQuery = sQuery & "TotalPrice= " & iTotalPrice & "," 	
	sQuery = sQuery & "TotalContainers = " & iTotalContainers & ","  
	sQuery = sQuery & "CurrentContainer =	" & iCurrentContainer & ", "
	sQuery = sQuery & "MasterTrackingNumber = '" & sMasterTrackingNumber & "', "		
	sQuery = sQuery & "TrackingNumber = '" & sTrackingNumber & "'," 		
	sQuery = sQuery & "PackageWeight = " & iPackageWeight & ", "
	sQuery = sQuery & "PackageBase = " & iPackageBase & ", "
	sQuery = sQuery & "PackageHandlingFee = " & iPackageHandlingFee & ", "
	sQuery = sQuery & "PackagePrice =  " & iPackagePrice & ", "
	sQuery = sQuery & "UCCNumber = '" & sUCCNumber & "', "   
	sQuery = sQuery & "TrackingIndicator = '" & sTrackingIndicator & "', "   
	sQuery = sQuery & "TrailerNumber = '" & sTrailerNumber & "', "
	sQuery = sQuery & "Lane = '" & sLane & "', "	
	sQuery = sQuery & "Terms = '" & sTerms & "', "
	sQuery = sQuery & "BillingAccount =	'" & sBillingAccount & "', "	
	sQuery = sQuery & "CustomerUpdated = '" & sCustomerUpdated & "' "
	
	'Code calls function that logs information in Database CSTM table Transactionlog
	REM strText = sQuery
	REM strPackageID  = sDeliveryID
	REM strFunctionname = "CustomerUpdateProShipOutputFile"
	REM StrMessage = "Inserting Package to ProshipOutputFile Table"
	REM Call AddLogTransaction(StrText, StrFunctionName, StrMessage, strPackageID)	
		
	On Error Resume Next
	Set rsProShipOutputFile = pCN.Execute(sQuery)
	
	'Code displays error message to operator if problem reading cstm(history) table.
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		strWindowMessage = "Received Error Writing Shipment  " & UCASE(strDeliveryID) & " to CSTM(ProShipOutputFile) Table" & vbCrLf & vbCrlf & _
						   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
						   "Shipment " & UCASE(strDeliveryID) & " WAS NOT written to CSTM(ProshipOutputFile)" & vbCrLF & _
						   "Please Report Problem to IT Department"
		strWindowTitle   = "Error Writing ProShipOutputFile - CustomerUpdateProShipOutputFile"
		MsgBox strWindowMessage,vbCritical + vbOkOnly,strWindowTitle
		
		'Code calls function that logs information in Database CSTM table Transactionlog
		strText = Err.Number & " - " & Err.Description 
		strPackageID  = sDeliveryID
		strFunctionname = "CustomerUpdateProShipOutputFile"
		strMessage = "Error Writing ProShipOutputFile"
		strMessage = Replace(strMessage, "\", "\\")
		Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
		
		'Code clears error and allows Proship to continue
		Err.Clear
	End If
	
	'Code Empties Record-set
	Set rsProshipOutputFile = Nothing
	
End Function


Function BatchSAPFigureIfFutureShipment(sShipmentXML, blnFutureShipmentFlag)
	'========================================================================
	' This functions figures if current shipment is a future shipment.
	'========================================================================
	
	'Code sets variables
	blnFutureShipmentFlag = False

	'Code gets current PC date and manifest date for shipments
	sManifestDate  	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE")
	sCurrentDate 	= Date
	
	'Code converts manifest date to format (YYYY-MM-DD)
	sManifestDate = DatePart("yyyy",sManifestDate) & "-" _
		& Right("0" & DatePart("m",sManifestDate), 2) & "-" _
		& Right("0" & DatePart("d",sManifestDate), 2) 
	
	'Code converts current date to format (YYYY-MM-DD)
	sCurrentDate = DatePart("yyyy",sCurrentDate) & "-" _
		& Right("0" & DatePart("m",sCurrentDate), 2) & "-" _
		& Right("0" & DatePart("d",sCurrentDate), 2) 
		
	'Code sets flag for future shipment
	If sManifestDate > sCurrentDate Then		
		blnFutureShipmentFlag = True
	Else
		blnFutureShipmentflag = False
	End If
	
End Function


Function BatchDisplayBatchFilesToDelete(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to delete 
	' batch files from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 		  		= ""
	sResponse 	  		= ""
	sCharacterLocation	= ""
	
	
	sQuery = "SELECT COUNT(1), InvoiceID, ProcessedDate FROM BatchInput " & _
	         "Where InvoiceID <> ' ' " & _
		     "GROUP BY InvoiceID "

	Set rsBatchInputFile = pCN.Execute(sQuery)
	
	'Code builds list of future shipment days
	Do While Not rsBatchInputFile.EOF
	
		DaList = DaList & space(25) & _
				 RPad(rsBatchInputFile.Fields(1)," ",30) & " (" & rsBatchInputFile.Fields(0) & " Packages)" & _
				 Space(10) & rsBatchInputFile.Fields(2) & "|"

		rsBatchInputFile.MoveNext
	Loop
	
	'Code closes record set
	rsBatchInputFile.Close
	
	'Code displays error message if no future shipments found
	If Len(DaList) = 0 Then
		sWindowMessage 	= "There are no Batch Shipments to Delete"
		sWindowName 	= "No Batches Found - BatchDisplayBatchFileToDelete"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If
	
	'Code trims the last | off
	DaList = Left(DaList, Len(DaList)-1)
	
	'Code display the list and get a result
	sResponse = Ask_List(DaList,"Select Batch File for Deletion",6000,"|",True,0,25)
	
	'Code exits function if operator doesn't pick a future shipment date
	If sResponse = "" Then 
		sWindowMessage 	= "Delete batch operation canceled by operator." 
		sWindowName 	= "No Selection was made - BatchDisplayBatchFileToDelete"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If

	
	'Code finds batch name from item picked by operator
	If blnBatchFilePicked = True Then
		'Code finds "(" contained in response from daList.
		sCharacterLocation = Instr(1,sResponse,"(")

		'Code checks to see if "(" exists in response
		If sCharacterLocation > 0 Then
			'Code extracts shipments left to process
			iTotalPackageCount = Mid(sResponse, sCharacterLocation + 1,12)
			iTotalPackageCount = CNum(iTotalPackageCount)
			'Code extracts batch name from daList Response
			sBatchName = Trim(Mid(sResponse,1,sCharacterLocation - 1))
		End If
	End If
	
End Function


Function BatchDeleteFile()
	'========================================================================
	' This function reads through CSTM(BATCHINPUT) table. Program displays 
	' list of all batch files that have been completely processed and allows 
	' operator to delete a batch
	'========================================================================
	
	'Code sets variables
	sQuery 				= ""
	sBatchName			= ""
	iTotalPackageCount	= 0
	iCurrrentPackage 	= 0	
	blnBatchFilePicked	= True
	blnOkToContinue		= True
	
	'Codes closes connection
	Set rsBatchInput = Nothing
	
	'Code calls function that displays list of customer batches to process
	Call BatchDisplayBatchFilesToDelete(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	
	'Code exits function if operator doesn't pick a batch to process
	If blnBatchFilePicked = False Then
		Exit Function
	End If
	
	'Code builds query to read CSTM.batchinput table
	sQuery = "Delete From BatchInput " & _
			 "WHERE InvoiceID = '" & sBatchName & "'" 

	'Code sends query to connection
	On Error Resume Next
	SET rsBatchInput = pCN.Execute(sQuery)
	
	'Code displays error message to operator if problem with delete batch from cstm(batchinputfile) table.
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		
		MsgBox Err.Number & vbcrlf & vbCrlf & _
			   Err.Description
		
		'Code calls function that logs information in Database CSTM table Transactionlog
		strText = Err.Number & " - " & Err.Description 
		strPackageID  = UCase(sBatchName)
		strFunctionname = "BatchDeleteFile"
		strMessage = "Error Deleting Batch from BatchInput Table"
		strMessage = Replace(strMessage, "\", "\\")
		Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
		
		'Code clears error and allows proship to continue
		Err.Clear
		
	Else
	
		'Code displays message that delete batch has completed.	
		sWindowMessage = "Batch " & sBatchName & " has been Deleted. Click OK Button to Continue"  
		sWindowName = "Batch.BatchDeleteFile"
		sWindowButtons = vbExclamation & vbOKOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName	
		
	End If
	
	
End Function

Function BatchBuildProductComboBox
	'========================================================================
	' This function reads through table CSTM(Product) and creates a combo box 
	' for batch screen field Product Code.
	'========================================================================
	'Remove any old Product Code lists, if they exist
	Set N = SYS.DD.SelectSingleNode("/SYSTEM/CSTM_BATCH_PRODUCT_CODE")
	If Not N is Nothing then N.parentnode.removechild(N)
	 
	'Now loop and populate a new child node
	Cnt=1
	SET rsProduct = pCN.Execute("SELECT ProductID, ProductDescription FROM Product ORDER BY ProductID")
	Do While Not rsProduct.EOF
	
		sProductID 			= Trim(rsProduct.Fields("ProductID")) & Space(02)
		sProductDescription = Space(02) & Trim(rsProduct.Fields("ProductDescription"))
		
		SYS.E("/SYSTEM/CSTM_BATCH_PRODUCT_CODE[" & cnt & "]/PLAINTEXT") = sProductDescription 
		SYS.E("/SYSTEM/CSTM_BATCH_PRODUCT_CODE[" & cnt & "]/SYMBOL") = sProductID
		
		Cnt = Cnt + 1
		rsProduct.MoveNext
	Loop
	
	'Code empties recordset
	Set rsProduct = Nothing
	
End Function

Function BatchSAPUpdateSAPDelivery(sShipmentXML, sShipmentResponseXML)
	'========================================================================
	' This functions updates customer warehouse system with shipment information. 
	'========================================================================
	
	'Set up variables
	strCurrentTime	= ""
	strDeliveryID 	= Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE"))
	sTotalPackages 	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")
	strRFCAction 	= "I"
	iCODFee			= 0.00

	'Code calls function that formats PC time into HHMMSS
	Call FormatShippedTimeHHMMSS(strCurrentTime)
	
	'07-31-2009 - Code calls function to parse out carrier and service from Proship service field.
	ProShipCarrier = GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)
	
	'08-19-2009 - Code gets today's date and proship ship date
	strTodaydate = Celse (now, "yyyymmdd")
	strManifestDate = CElse(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE"),"yyyymmdd")
	
	'07-31-2009 - Code converts carrier name to FXRS if FedEx Ground Shipment
	If CarrierName = "CAFE" Then
		CarrierName = "FXRS"
	ElseIf CarrierName = "ELS" Then
		CarrierName = "USPS"
	End If
	
	
	'Code builds Objects for RFC call
	FuncControl.Connection = oSAPConnection	
	Set WriteSAPData = FuncControl.Add("ZLSL_SEND_DELIVERY_DATA")
	Set strDelivery			= WriteSAPData.Exports("DELIVERY") 
	Set strSalesOrg			= WriteSAPData.Exports("SALES_ORG") 
	Set strAction			= WriteSAPData.Exports("ACTION") 
	Set strInvoiceInBox		= WriteSAPData.Exports("INVOICE_IN_BOX")
	Set strFutureShipDate	= WriteSAPData.Exports("FUTURE_SHIP_DATE") 		
	Set tblManifest			= WriteSAPData.Tables("MANIFEST_TAB")
	Set tblReturnError	 	= WriteSAPData.Tables("MANIFEST_ERROR_TAB")
	
	'Code sets field values that are passed to SAP that aren't part of a table
	strDelivery.Value 		= Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE"))
	strSalesOrg.Value 		= Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/SALES_ORGANIZATION"))
	strAction.Value 		= strRFCAction
	strInvoiceInBox.Value	= Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/INVOICE_CODE"))

	'08-19-2009 - Code checks to see if shipment is a future shipment
	If strManifestDate = strTodayDate Then
		strFutureShipDate.Value = 0
	Else
		strFutureShipDate.Value = strManifestDate
	End If
		
	'Code reads through each Proship Package node and creates a record in table that gets sent back
	'to customers host system.
	For iPackage = 1 to sTotalPackages
		tblManifest.Rows.Add
		tblManifest.Value(iPackage,"MNORD") = Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE"))
		
		'Code decides system code depending upon Sales Organization
		If Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/SALES_ORGANIZATION")) = "0010" Then
			tblManifest.Value(iPackage,"MNSYCD") = "1"
		Else
			tblManifest.Value(iPackage,"MNSYCD") = "2"
		End If
		
		tblManifest.Value(iPackage,"MNUNID")	= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[1]/PS_VOID_ID")
		tblManifest.Value(iPackage,"MNDTE") 	= CElse(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE"),"yyyymmdd")
		tblManifest.Value(iPackage,"MNTIME") 	= strCurrentTime
		tblManifest.Value(iPackage,"MNSYS") 	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_SHIPPERID")
		tblManifest.Value(iPackage,"MNTRAN") 	= " "
		tblManifest.Value(iPackage,"MNSEQ") 	= iPackage	
		tblManifest.Value(iPackage,"MNMODE") 	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")
		tblManifest.Value(iPackage,"MNPKG") 	= sTotalPackages
		tblManifest.Value(iPackage,"MNLTL") 	= Space(02)
		tblManifest.Value(iPackage,"MNZIP") 	= Left(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_POSTALCODE"),5)
		tblManifest.Value(iPackage,"MNWGT") 	= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iPackage & "]/WEIGHT")	
		tblManifest.Value(iPackage,"MNZONE") 	= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/ZONE")	
		tblManifest.Value(iPackage,"MNCAR") 	= Space(24)
		tblManifest.Value(iPackage,"MNTRCK") 	= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & iPackage & "]/TRACKING_NUMBER")	
		tblManifest.Value(iPackage,"MNBASE") 	= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")	
		tblManifest.Value(iPackage,"MNUCC") 	= ""		
		
		If CNum(s.e("SHIPMENT/CMS/CSTM_COD_AMOUNT")) > 0 Then
			tblManifest.Value(iPackage,"MNCODV")	= 0.00		
			tblManifest.Value(iPackage,"MNCOD") 	= 0.00	
		Else
			tblManifest.Value(iPackage,"MNCODV") 	= 0.00	
			tblManifest.Value(iPackage,"MNCOD") 	= 0.00
		End If
			
		tblManifest.Value(iPackage,"MNCODC") 	= 0.00
		tblManifest.Value(iPackage,"MNDVC") 	= 0.00
		tblManifest.Value(iPackage,"MNDVIA") 	= 0.00
		tblManifest.Value(iPackage,"MNAIA") 	= 0.00
		tblManifest.Value(iPackage,"MNAIC") 	= 0.00
		tblManifest.Value(iPackage,"MNAODC") 	= 0.00
		tblManifest.Value(iPackage,"MNCTC") 	= 0.00
		tblManifest.Value(iPackage,"MNHFEE") 	= 0.00
		tblManifest.Value(iPackage,"MNAFEE") 	= 0.00
		
		''tblManifest.Value(iPackage,"MNNET") = CNum(s.e("SHIPMENT/COMMON/TOTAL")) - CNum(s.e("SHIPMENT/COMMON/DISCOUNT"))
		'tblManifest.Value(iPackage,"MNTCHG") = CNum(s.e("SHIPMENT/COMMON/TOTAL")) - CNum(s.e("SHIPMENT/COMMON/DISCOUNT"))
		
		'Code removes discount from total price for Fedex express and ground shipments. That total amount being
		'passed back to customer will be Base + Special &&lp changed 060209
		If Left(Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")),14) = "BWTI_FXRS.FXRS" _
			Or Left(Trim(GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")),14) = "BWTI_FXRS.CAFE" Then
			tblManifest.Value(iPackage,"MNNET") 	= CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")) + CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/SPECIAL")) - CNum(iCODFee)	
			tblManifest.Value(iPackage,"MNTCHG") 	= CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")) + CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/SPECIAL")) - CNum(iCODFee)	
		Else
			tblManifest.Value(iPackage,"MNNET") 	= CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/TOTAL")) - CNum(iCODFee)	
			tblManifest.Value(iPackage,"MNTCHG") 	= CNum(GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/TOTAL")) - CNum(iCODFee)	
		End If
		
		tblManifest.Value(iPackage,"MNTXT1") 	= Space(10)
		tblManifest.Value(iPackage,"MNTXT2") 	= Space(10)
		tblManifest.Value(iPackage,"MNTXT3")	= Space(20)
		tblManifest.Value(iPackage,"MNCMNT") 	= "0"
		tblManifest.Value(iPackage,"MNPOST") 	= " "
		
		'Added 04-05-2013 - Code checks for WILLCALL shipment and changes carrier
		'that Proship passes back to SAP.
		If GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE") = "MR.LTL.WILLCALL" Then
			tblManifest.Value(iPackage,"MNCARRIER") = "WILLCA"
			tblManifest.Value(iPackage,"MNSERVICE") = "WILLCA"
		Else
			'07-31-2009 -Added to fields that get past back to customer
			tblManifest.Value(iPackage,"MNCARRIER") = Left(Trim(CarrierName),4)
			tblManifest.Value(iPackage,"MNSERVICE") = Left(Trim(CarrierService),6)
		End If
			
	Next
		
	'Code sends shipment information to RFC call. Then looks to see if RFC call returns error. Code displays any error messages
	'return from RFC call.
	If WriteSAPData.Call = True Then
		If tblReturnError.RowCount > 0 Then
			strErrorMessage = "Delivery " & UCASE(strDeliveryID) & " received error message below when updating SAP" & vbCrLF & vbCrLF & _
							  tblReturnError(1,"ERROR_CODE") & " | " & tblReturnError(1,"ERROR_DESC") & vbCrLf & vbCrLf & _
							  "Please VOID shipment and re-ship. If problem persists," & vbCrLf & _
							  "report problem to your support department"
			strWindowName = "Updating SAP - Leanin.CustomerPostShipShipment"
			strWindowButtons = vbCritical + vbOkOnly
			MsgBox strErrorMessage,strWindowButtons,strWindowName
			
			'Code calls function that logs information in Database CSTM table Transactionlog
			strText = tblReturnError(1,"ERROR_CODE") & " - " & tblReturnError(1,"ERROR_DESC")
			strPackageID  = strDeliveryID
			strFunctionname = "BatchSAPUpdateSAPDelivery - Batch.pss"
			strMessage = "Error Updating SAP Delivery"
			strMessage = Replace(strMessage, "\", "\\")
			Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
		End If
	Else
		strErrorMessage = "Received error from SAP Function ZLSL_SEND_DELIVERY_DATA" & vbCrLF & _
			  "Please VOID shipment and re-ship. If problem persists," & vbCrLf & _
			  "report problem to your support department"
		strWindowName = "Updating SAP - Leanin.CustomerPostShipShipment"
		strWindowButtons = vbCritical + vbOkOnly
		MsgBox strErrorMessage,strWindowButtons,strWindowName
	End If
	
	'Code empties objects
	Set strDelivery	= Nothing 
	Set strSalesOrg = Nothing 
	Set strAction = Nothing
	Set strInvoiceInBox	= Nothing
	Set strFutureShipDate = Nothing 		
	Set tblManifest	= Nothing 
	Set tblReturnError = Nothing

End Function

Function BatchCustomerImportFile()
	'========================================================================
	' This function reads in a CSV that contains Batch orders and creates 
	' shipment records into CSTM(BATCHINPUT) table. This table is used for 
	' processing shipments through batch process. This function gets called 
	' from USER.PSS and is found under USER menu.
	'========================================================================
	
	'Set variables
	sBatchFileName			= ""
	sCurrentRecord			= ""
	blnOkToContinue			= True
	iRecordCount			= 0
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = ""

	'Code calls function to find Eclipse batch file to import 
	Call BatchCustomerFindFile(sBatchFileName, blnOkToContinue)
	
	'Code exits batch import if not file was found
	If blnOkToContinue = False Then
		Exit Function
	End If
	
	'Code displays Batch Import screen.
	ShowForm "BATCHIMPORT",True,True
	
	'Code gets batch name from Proship xml node
	sBatchName = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME")
	
	'Code reads through Eclipse batch file
	If blnOkToContinue = True Then
	
		'Code finds out number of shipments in Eclipse batch
		Call BatchCustomerRecordCount(sBatchFileName, iRecordCount)
		
		'Code sets up progress bar that gives operator feed back on import process	
		iCurrent = 0
		iCount   = iRecordCount
		ProgressBar True,iCurrent,0,iCount,"Batch File Import","Importing Batch Records...", True
		
		'Set object variables
		Set fso = CreateObject("Scripting.FileSystemObject")
		
		'Code open input Batch File 
		Set TS = FSO.OpenTextFile(sBatchFileName,1)
		
		'Code disregards first line of file as it contains field names
		sCurrentRecord = TS.ReadLine
 
		'Code reads through Batch file until all records have been read.
		Do While Not TS.AtEndOfStream
			sCurrentRecord = TS.ReadLine
			
			Fieldz = Split(sCurrentRecord,",")
			strDeliveryID = Fieldz(1)
				
			'Code only reads text line if it contains data in first field
			If strDeliveryID <> "" Then	
				
				'Code updates current progress bar
				sMessage = "(Importing Shipment " & iCurrent & "  Of  " & iCount & ")" 
				Cancelme = CancelMe + ProgressBar(True,iCurrent ,,,, sMessage)

				'Code closes progress bar and exit function if operator clicks cancel button 
				If CancelMe <> 0 Then 
					ProgressBar False, 0
					Exit Function
				End If
				
				'Code calls function that inserts batch records into batchinput table
				Call BatchCustomerInsertBatchInputTable(sCurrentRecord, blnOkToContinue, iCurrent)
				
				'Code updates good record import counter
				If blnOkToContinue = True Then	
					iCurrent = iCurrent + 1
				End If
			End If
		Loop
		
		'Code closes progress bar on screen
		ProgressBar False, 0

		'Code displays message that Eclipse import has completed.	
		sWindowMessage = "Batch import into ProShip has Completed. Click OK Button to Continue"  & vbCrlf & vbCrlf &_
						   "Batch File:  " & sBatchFileName & vbcrlf & _
						   "Contained:   " & iCurrent & "  Records"
		sWindowName = "Batch.BatchImportFile"
		sWindowButtons = vbExclamation & vbOKOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName			
		
	End If
End Function

Function BatchCustomerRecordCount(sBatchFileName, iRecordCount)
	'========================================================================
	' This function reads in a CSV that contains batch orders to find out total number of
	' orders in batch file. 
	'========================================================================
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code open input Batch File 
	Set TS = FSO.OpenTextFile(sBatchFileName,1)

	'Code reads through Batch file until all records have been read.
	Do While Not TS.AtEndOfStream
		sLine = TS.ReadLine
		
		Fieldz = Split(sLine,",")
		strDeliveryID = Fieldz(1)
			
		'Code only reads text line if it contains data in first field
		If strDeliveryID <> "" Then	

			'Code adds 1 to record count
			iRecordCount = iRecordCount + 1
		End If
	Loop

End Function

Function BatchCustomerFindFile(sCustomerFileName, blnOkToContinue)
	'========================================================================
	' This function pops screen to operator so they can pick customer batch file that needs
	' to be processed.
	'========================================================================
	
	'Set object variables
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Code displays open file dialogue box so operator can find where batch file is located
	sCustomerFileName = ShowFileOpenDialog ("C:\", "Customer Batch File to Import", "CSV files (*.csv)")
	
	'Code checks for input file from Acumen. Not found display error message.
	If fso.FileExists(sCustomerFileName) Then
		'Code sets flag to continue
		blnOkToContinue = True
	Else
		'Displays error message if operator didn't find or pick a file to import
		sWindowMessage = "Batch Import Cancelled by Operator"
		sWindowName = "Batch.BatchCustomerFindFile"
		sWindowButtons = vbInformation + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName	
		
		'Code sets flag to not continue
		blnOkToContinue = False
	End If
End Function

Function BatchCustomerInsertBatchInputTable(sCurrentRecord, blnOkToContinue, iCurrent)
	'========================================================================
	' This function reads in a inserts records into CSTM.BatchInput table for batch 
	' shipments.
	'========================================================================
	
	'Set variables
	sQuery		= ""
	
	'Code splits current record in csv file into separate fields.
	Fieldz = Split(sCurrentRecord,",")
	
	'Code sets variables for insert statement
	sPackageID 				= iCurrent
	sInvoiceID				= CTrim(FixStringField(Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME")),30)
	'sShipperID				= Shipment.E("/SHIPMENT/COMMON/SHIPPER")
	sShipperID				= "TRADE"
	sCustomerID				= CTrim(FixStringField(Fieldz(0)),35)
	sCustomerName 			= CTrim(FixStringField(Fieldz(1)),35)
	sCustomerContact 		= CTrim(FixStringField(Fieldz(2)),35)
	sCustomerAddress1 		= CTrim(FixStringField(Fieldz(3)),35)
	sCustomerAddress2		= CTrim(FixStringField(Fieldz(4)),30)
	sCustomerAddress3		= ""
	sCustomerCity 			= CTrim(FixStringField(Fieldz(5)),30)
	sCustomerState 			= Fieldz(6)
	sCustomerZip 			= Fieldz(7)
	
	'Code adds 0 to zip codes that are less then 5 digits in length
	If Len(Trim(sCustomerZip)) = 4 Then
		sCustomerZip = "0" & sCustomerZip
	End If
	
	sCustomerCountry 		= "US"
	sCustomerPhone			= ""
	sPurchaseOrder			= ""
	sShipVia				= ""
	sInvoiceType			= ""
	sResidentialFlag		= "Y"
	sPaymentTerms			= ""
	sPackagePerShipment		= "1"
	
	sPackage1BoxWeight		= CNum(Fieldz(8))
	sPackage1BoxType		= ""
	sPackage1BoxDimensions	= ""

	sPackage2BoxWeight		= 0.00
	sPackage2BoxType		= ""
	sPackage2BoxDimensions	= ""
	
	sPackage3BoxWeight		= 0.00
	sPackage3BoxType		= ""
	sPackage3BoxDimensions	= ""
	
	sPackage4BoxWeight		= 0.00
	sPackage4BoxType		= ""
	sPackage4BoxDimensions	= ""
	
	sPackage5BoxWeight		= 0.00
	sPackage5BoxType		= ""
	sPackage5BoxDimensions	= ""
	

	iTotalSales 			= 0.00
	iCustomerCharge 		= 0.00
	sProcessedFlag 			= "N"
	sRecordType				= "B"
	sMiscText1 				= ""

	'Code pads store number with leading zeros
	sMiscText1				= ""
	sMiscText2 				= ""
	sMiscText3				= ""
	sMiscText4				= ""
	sMiscText5				= ""
	
	'Code converts country code from Eclipse to ISO codes for Proship
	If sCustomerCountry <> "" _
		And sCustomerCountry <> "US" Then
		strCountryName = sCustomerCountry
		strISOCode = ""
		
		'Code calls function that converts customers country codes to ISO codes for Proship
		Call Plaintext2ISO2(strCountryName, strISOCode)
		sCustomerCountry = strISOCode
	Else
		sCustomerCountry = "US"
	End If	
	
	'Codes builds insert statement if OkToContinue flag is TRUE
	If blnOkToContinue = True Then
		sQuery = "Insert into BatchInput set "
		sQuery = sQuery & "PackageID = '" & sPackageID & "', "	
		sQuery = sQuery & "InvoiceID = '" & UCase(sInvoiceID) & "', "
		sQuery = sQuery & "ShipperID = '" & UCase(sShipperID) & "', "
		sQuery = sQuery & "CustomerID = '" & sCustomerID & "', "
		sQuery = sQuery & "CustomerName = '" & sCustomerName & "',"
		sQuery = sQuery & "CustomerContact = '" & sCustomerContact & "',"
		sQuery = sQuery & "CustomerAddress1 = '" & sCustomerAddress1 & "'," 
		sQuery = sQuery & "CustomerAddress2	= '" & sCustomerAddress2 & "'," 
		sQuery = sQuery & "CustomerAddress3	= '" & sCustomerAddress3 & "'," 
		sQuery = sQuery & "CustomerCity = '" & sCustomerCity & "',"
		sQuery = sQuery & "CustomerState = '" & sCustomerState & "',"
		sQuery = sQuery & "CustomerZip = '" & sCustomerZip & "'," 
		sQuery = sQuery & "CustomerCountry = '" & sCustomerCountry & "',"
		sQuery = sQuery & "CustomerPhone = '" & sCustomerPhone & "',"  	
		sQuery = sQuery & "PurchaseOrder = '" & sPurchaseOrder & "',"	
		sQuery = sQuery & "CustomerShipMethod = '" & sShipVia & "',"
		sQuery = sQuery & "InvoiceType = '" & sInvoiceType & "'," 
		sQuery = sQuery & "ResidentialFlag = '" & sResidentialFlag & "', "
		sQuery = sQuery & "PaymentTerms = '" & sPaymentTerms & "', "
		sQuery = sQuery & "PackagePerShipment = " & sPackagePerShipment & ", "
		sQuery = sQuery & "Package1Weight = " & sPackage1BoxWeight & "," 	
		sQuery = sQuery & "Package1BoxType = '" & sPackage1BoxType & "'," 
		sQuery = sQuery & "Package1Dimensions = '" & sPackage1BoxDimensions & "'," 	
		sQuery = sQuery & "Package2Weight = " & sPackage2BoxWeight & "," 	
		sQuery = sQuery & "Package2BoxType = '" & sPackage2BoxType & "'," 
		sQuery = sQuery & "Package2Dimensions = '" & sPackage2BoxDimensions & "'," 
		sQuery = sQuery & "Package3Weight = " & sPackage3BoxWeight & "," 	
		sQuery = sQuery & "Package3BoxType = '" & sPackage3BoxType & "'," 
		sQuery = sQuery & "Package3Dimensions = '" & sPackage3BoxDimensions & "'," 
		sQuery = sQuery & "Package4Weight = " & sPackage4BoxWeight & "," 	
		sQuery = sQuery & "Package4BoxType = '" & sPackage4BoxType & "'," 
		sQuery = sQuery & "Package4Dimensions = '" & sPackage4BoxDimensions & "'," 
		sQuery = sQuery & "Package5Weight = " & sPackage5BoxWeight & "," 	
		sQuery = sQuery & "Package5BoxType = '" & sPackage5BoxType & "'," 
		sQuery = sQuery & "Package5Dimensions = '" & sPackage5BoxDimensions & "'," 
		sQuery = sQuery & "TotalSales = " & iTotalSales & ", " 
		sQuery = sQuery & "CustomerCharge = " & iCustomerCharge & ", " 	
		sQuery = sQuery & "RecordType = '" & sRecordType & "', "			
		sQuery = sQuery & "MiscText1 = '" & sMiscText1 & "', "	
		sQuery = sQuery & "MiscText2 = '" & sMiscText2 & "', "
		sQuery = sQuery & "MiscText3 = '" & sMiscText3 & "', "
		sQuery = sQuery & "MiscText4 = '" & sMiscText4 & "', "
		sQuery = sQuery & "MiscText5 = '" & sMiscText5 & "', "
		sQuery = sQuery & "ProcessedFlag = 'N' "
				
		On Error Resume Next
		Set rsBatchInput = pCN.Execute(sQuery)
		
		'Code displays error message to operator if problem inserting into cstm(batchinputfile) table.
		If Err.Number <> 0 _
			Or Err.Description <> "" Then
			
			'Code calls function that logs information in Database CSTM table Transactionlog
			strText = Err.Number & " - " & Err.Description 
			strPackageID  = UCase(sInvoiceID)
			strFunctionname = "BatchCustomerInsertBatchInputTable"
			strMessage = "Error Inserting Batch record " & sPackageID & " into BatchInput Table"
			strMessage = Replace(strMessage, "\", "\\")
			Call AddLogTransaction(strText, strFunctionName, strMessage, strPackageID)
			
			'Code clears error and allows proship to continue
			Err.Clear
		End If
	End If
End Function

Function BatchCustomerProcessFile()
	'========================================================================
	' This function allows operator to pick a customer batch and process these shipments
	' through Proship, printing labels, updating CSTM.History table.
	'========================================================================
	
	'Code sets variables
	sQuery 				= ""
	sBatchName			= ""
	iTotalPackageCount	= 0
	iCurrrentPackage 	= 0	
	blnBatchFilePicked	= True
	blnOkToContinue		= True
	Shipment.E("/SHIPMENT/CMS/CSTM_INTERFACE")						= "BATCH"
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")		= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")	= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")				= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") 					= ""
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG")			= ""
	
	'Codes closes connection
	Set rsBatchInput = Nothing
	
	'Code calls function that displays list of customer batches to process
	Call BatchCustomerDisplayBatchFiles(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	
	'Code exits function if operator doesn't pick a batch to process
	If blnBatchFilePicked = False Then
		Exit Function
	End If
	
	'Code calls function to build domestic and international ship-via combo box
	Call BatchBuildShipMethodComboBox()

	'Code calls function to build product code combo box
	Call BatchBuildProductComboBox
	
	'Code stores batch name to process
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") = sBatchName
		   
	'Code populates number of shipment to process with total records left in CSTM(BatchInput)
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS") = iTotalPackageCount

	'Code displays screen to fill out how they need to process batch file.
	ShowForm "BATCH",True,True
	
	'Code calls function that translates domestic ship method to valid Proship ship method
	If Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") <> "" Then
		sShipMethod = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") = sProShipShipmethod
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN") = sShipMethod
	End If
	
	'Code calls function that translates international ship method to valid Proship ship method
	If Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") <> "" Then
		sShipMethod = Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
		Call BatchReadShipViaTable(sShipMethod, sProShipShipmethod, sProShipShipMethodDescription)
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") = sProShipShipmethod
		Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN") = sShipMethod
	End If
	
	'Code populates CMS xml nodes and variables
	Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPDATE") = Shipment.E("/SHIPMENT/COMMON/SHIPDATE")
	iTotalShipmentCount				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS")
	sBatchShipdate 					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPDATE")
	sBatchShipMethod 				= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN")
	sBatchDepartment 				= Shipment.E("/SHIPMENT/CMS/CSTM_DEPARTMENT")
	sProductID						= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_PRODUCT_CODE")
	sBatchInternationalShipMethod	= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN")
	sBatchItemQty					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY")
	sBatchItemValue					= Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE")

	'Code looks up product id in CSTM.Product table if operator picks a product code on batch screen
	If sProductID <> "" Then
		Call LookupProductCode(sProductID)
	End If
		
	'Code calls function that builds batch set-up XML file.
	Call BatchCustomerBuildBatchSetupXML(sBatchSetupXML)
	
	'Code displays message to allow to cancel processing batch
	sWindowMessage = "You are about to process  " &  iTotalShipmentCount & "  Shipments for Batch  " & sBatchName & Vbcrlf & vbCrlf &_
					 "Shipping Date" & vbTab & vbTab & "=  " & sBatchShipDate & vbCrlf & _
					 "Domestic Ship-method" & vbTab & "=  " & sBatchShipMethod & vbCrlf & _
					 "Department" & vbTab & vbTab & "=  " & sBatchDepartment & vbCrlf & _
					 "International Ship-method" & vbTab & "=  " & sBatchInternationalShipMethod & vbCrlf & _	
					 "Product Code" & vbTab & vbTab & "=  " & sProductID & vbCrlf & _
					 "Item Qty" & vbTab & vbTab & vbTab & "=  " & sBatchItemQty & vbCrlf & _
					 "Item Value" & vbTab & vbTab & "=  " & sBatchItemValue & vbCrlf & vbCrlf & _
					 "Click YES to process batch." & vbCrlf & _
					 "Click NO  to exit batch process."
	sWindowButtons = vbQuestion+vbYesNo
	sWindowName = "Batch Shipment Count - Batch.BatchProcessFile"
	
	If vbNo = Msgbox(sWindowMessage,sWindowButtons,sWindowName) Then
		Exit Function
	End If	
	
	'Code builds query to read CSTM.batchinput table
	sQuery = "SELECT PackageID, InvoiceID, ShipperID, CustomerID, CustomerName, CustomerContact, CustomerAddress1, " & _
			 "CustomerAddress2, CustomerAddress3, CustomerCity, CustomerState, CustomerZip, CustomerCountry, " & _
			 "CustomerPhone, PurchaseOrder, CustomerShipMethod, InvoiceType, ResidentialFlag, PaymentTerms, " & _
			 "Package1Weight, Package1BoxType, Package1Dimensions, Package2Weight, Package2BoxType, Package2Dimensions, " & _
			 "Package3Weight, Package3BoxType, Package3Dimensions, Package4Weight, Package4BoxType, Package4Dimensions, " & _
			 "Package5Weight, Package5BoxType, Package5Dimensions, TotalSales, CustomerCharge, RecordType, MiscText1, " & _
			 "MiscText2, MiscText3, MiscText4, MiscText5, ProcessedFlag, ProcessedDate, ShipmentErrorMessage " & _
			 "FROM BatchInput " & _
			 "WHERE InvoiceID = '" & Trim(sBatchName) & "' " & _
			 "And ProcessedFlag = 'N' " & _ 
			 "Order By PackageID" 
			 
	'Code sends query to connection
	SET rsBatchInput = pCN.Execute(sQuery)
	
	'Code sets pointer to first record in record-set
	rsBatchInput.MoveFirst
	
	'Code builds/show progress bar
	ProgressBar True,iCurrrentPackage,0,iTotalPackageCount,"Batch Processing","Shipping...", True
	
	'Code loops through Batchinput record-set to process shipments in batch
	For iCurrentShipment = 1 To iTotalShipmentCount

		Cancelme = CancelMe + ProgressBar(True,B_Current)
		If CancelMe <> 0 Then 'If user presses cancel then stop
			ProgressBar False, 0
			Exit Function
		End If
		
		'Populates variable with SAP order number
		strDeliveryID = Trim(rsBatchInput.Fields("Packageid").value & "")
		sErrorMessage = ""
		
		'Code calls function that checks for duplicate shipments
		'Call CheckDuplicateIDReturnsError(strDeliveryID, sErrorMessage, blnOkToContinue)
		
		'Code updates shipment CSTM.BatchInput there is a duplicate shipment
		If blnOkToContinue = False _
			And Trim(sErrorMessage) <> "" Then

			Call BatchCustomerUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)		
		
		Else
			'Code calls function that builds shipment xml that is processed by Proship
			Call BatchCustomerBuildShipmentXML(sShipmentXML, sBatchSetupXML, rsBatchInput)
			
			'Code sets variable for Packageid to be used in rest of function
			sBatchPackageID = GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")    
			
			'SaveAsFile sShipmentXML, "C:\lp\ShipmentRequest.xml"
			
			'update progress bar - if a lock up occurs it can be isolated to here
			sMessage = "(Sending  " & B_RefNo & "  XML to Server)" 
			Cancelme = CancelMe + ProgressBar(True,B_Current ,,B_Count,, sMessage)
			
			'Send XML to Proship server
			sShipmentResponseXML = ServerQuery(sShipmentXML)	

			'SaveAsFile sShipmentresponseXML, "C:\lp\ShipmentResponse.xml"
			
			'Code checks for a successful Proship shipment. If <ERROR> found we update
			'CSTM.batchinput that shipments was bad and also log Proship error message
			If Instr(1,sShipmentResponseXML,"<ERROR>") > 0 Then

				'Code updates progress bar for operator
				sMessage = "(Updating  " & sBatchPackageID & "  as Bad Shipment)" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				'Code parse out data in XML Node <ERROR>
				sErrorMessage = CTrim(sShipmentResponseXML,4000)
				
				'Code calls function to update shipment in CSTM.BatchInput Table as bod and also
				'error message from Proship
				Call BatchCustomerUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)

				'Code updates count for bad shipments in batch
				BadCount = BadCount + 1
				
			Else			
				'Code gets packages per shipment from SHIPMENTXML
				iPackagesPerShipment = GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")

				For iCurrentPackage = 1 To Cnum(iPackagesPerShipment)
				
					'Code updates progress bar for operator
					sMessage = "(Printing Label for  " & sBatchPackageID & "  )" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
				
					'Code calls function that sends each package label to printer
					Call BatchCustomerPrintShippingLabel(sShipmentResponseXML, sShipmentXML, iCurrentPackage)
					
					'Code updates progress bar for operator
					sMessage = "(Inserting Shipment  " & sBatchPackageID & "  into CSTM.History  )" 
					Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)	
					
					'Code calls function that insert packages into CSTM.History
					Call BatchCustomerUpdateHistory(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
				Next
				
				'Code updates progress bar for operator
				sMessage = "(Updating  " & sBatchPackageID & "  as Good Shipment)" 
				Cancelme = CancelMe + ProgressBar(True,B_Current ,,,, sMessage)
				
				'Code calls function that updates PackageId in CSTM>batchInputFile as successful shipment
				Call BatchSAPUpdateBatchInputFileGood(sShipmentXML)
				
			End If
		End If
		B_Current = B_Current + 1
		rsBatchInput.MoveNext
	Next
	
	'Code close Progress bar and dataset connection
	ProgressBar False, 0
	Set rsBatchInput = Nothing
	
End Function
	
Function BatchCustomerDisplayBatchFiles(sBatchName, iTotalPackageCount, blnBatchFilePicked)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to decide how many shipments
	' to process from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 		  		= ""
	sResponse 	  		= ""
	sCharacterLocation	= ""
	
	
	sQuery = "SELECT COUNT(1), InvoiceID FROM BatchInput " & _
	         "Where InvoiceID <> ' ' " & _
			 "And ProcessedFlag = 'N' " & _
		     "GROUP BY InvoiceID "

	Set rsBatchInputFile = pCN.Execute(sQuery)
	
	'Code builds list of future shipment days
	Do While Not rsBatchInputFile.EOF
	
		DaList = DaList & space(25) & _
				 rsBatchInputFile.Fields(1) & " (" & rsBatchInputFile.Fields(0) & " Packages)|"

		rsBatchInputFile.MoveNext
	Loop
	
	'Code closes record set
	rsBatchInputFile.Close
	
	'Code displays error message if no future shipments found
	If Len(DaList) = 0 Then
		sWindowMessage 	= "There are no Batch Shipments to Process"
		sWindowName 	= "No Shipments Found - BatchCustomerDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If
	
	'Code trims the last | off
	DaList = Left(DaList, Len(DaList)-1)
	
	'Code display the list and get a result
	sResponse = Ask_List(DaList,"Select Batch File for Processing",6000,"|",True,0,25)
	
	'Code exits function if operator doesn't pick a future shipment date
	If sResponse = "" Then 
		sWindowMessage 	= "Operation cancelled by operator." 
		sWindowName 	= "No Selection was made - BatchCustomerDisplayBatchFile"
		sWindowButtons 	= vbCritical + vbOkOnly
		
		MsgBox sWindowMessage,sWindowButtons, sWindowName
		blnBatchFilePicked = False
		Exit Function
	End If
	
	'Code finds batch name from item picked by operator
	If blnBatchFilePicked = True Then
		'Code finds "(" contained in response from daList.
		sCharacterLocation = Instr(1,sResponse,"(")

		'Code checks to see if "(" exists in response
		If sCharacterLocation > 0 Then
			'Code extracts shipments left to process
			iTotalPackageCount = Mid(sResponse, sCharacterLocation + 1,12)
			iTotalPackageCount = CNum(iTotalPackageCount)
			'Code extracts batch name from daList Response
			sBatchName = Trim(Mid(sResponse,1,sCharacterLocation - 1))
		End If
	End If
End Function

Function BatchCustomerBuildBatchSetupXML(sBatchSetupXML)
	'========================================================================
	' This function builds Batch Set-up XML file that is used to tell Proship how to process
	' current batch file.
	'========================================================================
	
	'Code builds batch set-up XML file.
	sBatchSetupXML = "<BATCH_SETUP>"
	sBatchSetupXML = sBatchSetupXML & "<CMS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPDATE>" & Shipment.E("/SHIPMENT/COMMON/SHIPDATE") & "</CSTM_BATCH_SHIPDATE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DEPARTMENT>" & Shipment.E("/SHIPMENT/CMS/CSTM_DEPARTMENT") & "</CSTM_BATCH_DEPARTMENT>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPPERID>" & Shipment.E("/SHIPMENT/CMS/CSTM_SHIPPERID") & "</CSTM_BATCH_SHIPPERID>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_USERNAME>" & Shipment.E("/SHIPMENT/CMS/CSTM_USERNAME") & "</CSTM_BATCH_USERNAME>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_WORKSTATIONID>" & Shipment.E("/SHIPMENT/CMS/CSTM_USERTEXT1") & "</CSTM_BATCH_WORKSTATIONID>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_SHIPMENTS_TO_PROCESS>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_SHIPMENTS_TO_PROCESS") & "</CSTM_BATCH_SHIPMENTS_TO_PROCESS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DOMESTIC_SHIPMETHOD>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD") & "</CSTM_BATCH_DOMESTIC_SHIPMETHOD>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_INTERNATIONAL_SHIPMETHOD>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD") & "</CSTM_BATCH_INTERNATIONAL_SHIPMETHOD>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PRODUCT_CODE>" & Shipment.E("/SHIPMENT/CMS/BATCH_PRODUCT_CODE") & "</CSTM_BATCH_PRODUCT_CODE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PRODUCT_DESCRIPTION>" & Shipment.E("/SHIPMENT/CMS/PRODUCT/LINE/CSTM_CI_DESCRIPTION") & "</CSTM_BATCH_PRODUCT_DESCRIPTION>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_ITEM_QTY>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_QTY") & "</CSTM_BATCH_ITEM_QTY>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_ITEM_VALUE>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_ITEM_VALUE") & "</CSTM_BATCH_ITEM_VALUE>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_NAME>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_NAME") & "</CSTM_BATCH_NAME>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_RESIDENTIAL_FLAG>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_RESIDENTIAL_FLAG") & "</CSTM_BATCH_RESIDENTIAL_FLAG>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN") & "</CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN>" & Shipment.E("/SHIPMENT/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN") & "</CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PAYMENT_TERMS>" & Shipment.E("/SHIPMENT/COMMON/TERMS") & "</CSTM_BATCH_PAYMENT_TERMS>"
	sBatchSetupXML = sBatchSetupXML & "<CSTM_BATCH_PACKAGING_TYPE>" & Shipment.E("/SHIPMENT/PACKAGE/PACKAGING") & "</CSTM_BATCH_PACKAGING_TYPE>"
	sBatchSetupXML = sBatchSetupXML & "</CMS>"
	sBatchSetupXML = sBatchSetupXML & "</BATCH_SETUP>"

End Function

Function BatchCustomerBuildShipmentXML(sShipmentXML, sBatchSetupXML, rsBatchInput)
	'========================================================================
	' This function builds shipment XML that is sent to Proship server for shipping.
	'========================================================================
	
	'Code sets variables
	sPackageNode 				= ""
	sCommonNode 				= ""
	sCMSNode					= ""
	sBatchPrinterSetting		= ""
	sBatchShipmethod			= ""
	sBatchPSLRFormat			= ""
	sBatchDestinationPrinter	= ""
	iPackagesPerShipment		= 0
	
	'Code populates variables from rsBatchInput record-set
	sBatchPackageID 			= Trim(rsBatchInput.Fields("Packageid").value & "")
	sBatchInvoiceID 			= Trim(rsBatchInput.Fields("Invoiceid").value & "")
	sBatchShipperID 			= Trim(rsBatchInput.Fields("Shipperid").value & "")
	sBatchCustomerID 			= Trim(rsBatchInput.Fields("CustomerID").value & "")
	sBatchCustomerName 			= Trim(rsBatchInput.Fields("CustomerName").value & "") 
	sBatchCustomerContact 		= Trim(rsBatchInput.Fields("CustomerContact").value & "")
	sBatchCustomerAddress1 		= Trim(rsBatchInput.Fields("CustomerAddress1").value & "")
	sBatchCustomerAddress2 		= Trim(rsBatchInput.Fields("CustomerAddress2").value & "")
	sBatchCustomerCity 			= Trim(rsBatchInput.Fields("CustomerCity").value & "")
	sBatchCustomerState 		= Trim(rsBatchInput.Fields("CustomerState").value & "")
	sBatchCustomerZip 			= Left(rsBatchInput.Fields("CustomerZip").value & "",5)
	sBatchCustomerCountry 		= Trim(rsBatchInput.Fields("CustomerCountry").value & "")
	sBatchCustomerPhone 		= Trim(rsBatchInput.Fields("CustomerPhone").value & "")
	sBatchPurchaseOrder 		= Trim(rsBatchInput.Fields("PurchaseOrder").value & "")
	sBatchResidentialFlag 		= Trim(rsBatchInput.Fields("ResidentialFlag").value & "")
	
	'Code plugs SHIPPER as payment terms if missing from batch file
	If Trim(rsBatchInput.Fields("PaymentTerms").value & "") = "" Then
		sBatchPaymentTerms = "SHIPPER"
	Else
		sBatchPaymentTerms 			= Trim(rsBatchInput.Fields("PaymentTerms").value & "")
	End If
	
	sBatchPackage1Weight 		= Trim(rsBatchInput.Fields("Package1Weight").value & "")
	sBatchPackage1BoxType 		= Trim(rsBatchInput.Fields("Package1BoxType").value & "")
	sBatchPackage1Dimensions 	= Trim(rsBatchInput.Fields("Package1Dimensions").value & "")
	sBatchPackage2Weight 		= Trim(rsBatchInput.Fields("Package2Weight").value & "")
	sBatchPackage2BoxType 		= Trim(rsBatchInput.Fields("Package2BoxType").value & "")
	sBatchPackage2Dimensions 	= Trim(rsBatchInput.Fields("Package2Dimensions").value & "")
	sBatchPackage3Weight 		= Trim(rsBatchInput.Fields("Package3Weight").value & "")
	sBatchPackage3BoxType 		= Trim(rsBatchInput.Fields("Package3BoxType").value & "")
	sBatchPackage3Dimensions 	= Trim(rsBatchInput.Fields("Package3Dimensions").value & "")
	sBatchPackage4Weight 		= Trim(rsBatchInput.Fields("Package4Weight").value & "")
	sBatchPackage4BoxType 		= Trim(rsBatchInput.Fields("Package4BoxType").value & "")
	sBatchPackage4Dimensions 	= Trim(rsBatchInput.Fields("Package4Dimensions").value & "")
	sBatchPackage5Weight 		= Trim(rsBatchInput.Fields("Package5Weight").value & "")
	sBatchPackage5BoxType 		= Trim(rsBatchInput.Fields("Package5BoxType").value & "")
	sBatchPackage5Dimensions 	= Trim(rsBatchInput.Fields("Package5Dimensions").value & "")
	sBatchTotalSales 			= Trim(rsBatchInput.Fields("TotalSales").value & "")
	sBatchCustomerCharge 		= Trim(rsBatchInput.Fields("CustomerCharge").value & "")
	sBatchRecordType		 	= Trim(rsBatchInput.Fields("RecordType").value & "")	
	sBatchMiscText1			 	= Trim(rsBatchInput.Fields("MiscText1").value & "")
	sBatchMiscText2			 	= Trim(rsBatchInput.Fields("MiscText2").value & "")
	sBatchMiscText3			 	= Trim(rsBatchInput.Fields("MiscText3").value & "")
	sBatchMiscText4			 	= Trim(rsBatchInput.Fields("MiscText4").value & "")
	sBatchMiscText5			 	= Trim(rsBatchInput.Fields("MiscText5").value & "")
	
	'Code populates variables from sBatchsetupXML 
	sBatchServiceDomestic 					= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD")      
	sBatchServiceInternational				= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD")
	sBatchDepartment						= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DEPARTMENT")
	sBatchUserID 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_SHIPPERID")
	sBatchUserName 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_USERNAME")
	sBatchWorkstationID 					= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_WORKSTATIONID")
	sBatchShipDate 							= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_SHIPDATE")
	sBatchDomesticCustomerShipmethod		= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_DOMESTIC_SHIPMETHOD_IN")
	sBatchInternationalCustomerShipmethod	= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_INTERNATIONAL_SHIPMETHOD_IN")
	
	'Code populates miscellaneous variables
	sBatchInterface = "BATCH"
	sBatchPackaging = GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_PACKAGING_TYPE")
		
	'Code populates International variables
	If sBatchCustomerCountry = "US" _
		Or sBatchCustomerCountry = " " Then
	Else
		sBatchCIMethod 				= "0"
		sBatchSenderEIN 			= "84-1130457"
		sBatchDescription 			= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_PRODUCT_DESCRIPTION")
		sBatchSEDMethod 			= "0"  'No SED Required
		sBatchExportReason 			= "Sale"
		sBatchAESFilingStatus 		= "S"	'Shipper
		sBatchCurrencyRate 			= "USD"	'US Dollars
		sBatchConsigneeCountry		= UCase(Trim(rsBatchInput.Fields("CustomerCountry").value & ""))
		sBatchFSTRExemptionNumber	= ""
		sBatchLicenseNumber 		= "NLR"
		sBatchInternationalTerms 	= "DDP"
		sTotalInvoiceAmount			= GetNodeValue(sBatchSetupXML, "/BATCH_SETUP/CMS/CSTM_BATCH_ITEM_VALUE")
		
		'Codes sets Exemption number for FedEx shipments going to Canada.
		If UCase(Trim(sBatchCustomerCountry)) = "CA" Then	
			sFSTRExemptionNumber = "FTR 30.58"
		Else
			'sFSTRExemptionNumber = "FTR 30.55(h)"
		End If
	End If
	
	
	'Code sets service depending upon country code from batchinput table
	If sBatchCustomerCountry = "US" _
		Or sBatchCustomerCountry = " " Then
		sBatchShipmethod   = sBatchServiceDomestic 
		sBatchShipmethodIn = sBatchDomesticCustomerShipmethod
	Else
		sBatchShipmethod   = sBatchServiceInternational
		sBatchShipmethodIn = sBatchInternationalCustomerShipmethod
	End If
	
	'Code figures out total number of packages for each shipment based upon
	'number of package weight fields populated in CSTM.BatchInput table
	If CNum(sBatchPackage1Weight) > 0 Then
		iPackagesPerShipment = 1
	End If
	
	If CNum(sBatchPackage2Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage3Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage4Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
	
	If CNum(sBatchPackage5Weight) > 0 Then
		iPackagesPerShipment = iPackagesPerShipment + 1
	End If
		
	'Code calls function that figures out printer settings for shipment being used.
	Call BatchCustomerFindPrinterSetting(sBatchShipmethod, sBatchPSLRFormat, sBatchDestinationPrinter)
	
	'Build Common nodes for Proship
	sCommonNode = "<COMMON>" 
	sCommonNode = sCommonNode &	"<SHIPDATE>" & sBatchShipDate & "</SHIPDATE>" 
	sCommonNode = sCommonNode &	"<TERMS>" & sBatchPaymentTerms & "</TERMS>" 
	sCommonNode = sCommonNode &	"<SHIPPER_REFERENCE>" & sBatchPackageID & "</SHIPPER_REFERENCE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CODE>" & Trim(sBatchCustomerID) & "</CONSIGNEE_CODE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_COMPANY>" & Trim(sBatchCustomerName) & "</CONSIGNEE_COMPANY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CONTACT>" & Trim(sBatchCustomerContact) & "</CONSIGNEE_CONTACT>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS1>" & Trim(sBatchCustomerAddress1) & "</CONSIGNEE_ADDRESS1>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_ADDRESS2>" & Trim(sBatchCustomerAddress2) & "</CONSIGNEE_ADDRESS2>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_CITY>" & Trim(sBatchCustomerCity) & "</CONSIGNEE_CITY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_STATE>" & Trim(sBatchCustomerState) & "</CONSIGNEE_STATE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_POSTALCODE>" & Trim(sBatchCustomerZip) & "</CONSIGNEE_POSTALCODE>" 
	sCommonNode = sCommonNode & "<CONSIGNEE_COUNTRY>" & sBatchCustomerCountry & "</CONSIGNEE_COUNTRY>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_PHONE>" & sBatchCustomerPhone & "</CONSIGNEE_PHONE>" 
	sCommonNode = sCommonNode &	"<CONSIGNEE_REFERENCE>" & sBatchPurchaseOrder  & "</CONSIGNEE_REFERENCE>" 
	sCommonNode = sCommonNode &	"<SHIPPER>" & sBatchShipperID & "</SHIPPER>" 
	
	'Code populates residential flag in Proship if set on
	If UCase(sBatchResidentialFlag) = "Y" Then
		sCommonNode = sCommonNode &	"<CONSIGNEE_RESIDENTIAL>True</CONSIGNEE_RESIDENTIAL>"
	End If	

	'Code populates Proship common international nodes
	If sBatchCustomerCountry <> "US" _
		And sBatchCustomerCountry <> " " Then
		
		sCommonNode = sCommonNode &	"<CI_METHOD>" & sBatchCIMethod  & "</CI_METHOD>" 
		sCommonNode = sCommonNode &	"<DECLARED_VALUE_CUSTOMS>" & sTotalInvoiceAmount  & "</DECLARED_VALUE_CUSTOMS>" 
		sCommonNode = sCommonNode &	"<FSTR_EXEMPTION_NO>" & sFSTRExemptionNumber  & "</FSTR_EXEMPTION_NO>" 
		'sCommonNode = sCommonNode &	"<DESCRIPTION>" & sBatchCIMethod  & "</DESCRIPTION>" 
		sCommonNode = sCommonNode &	"<SENDER_EIN>" & sBatchSenderEIN  & "</SENDER_EIN>" 
		sCommonNode = sCommonNode &	"<RATE_CURRENCY>" & sBatchCurrencyRate  & "</RATE_CURRENCY>" 
		sCommonNode = sCommonNode &	"<ULTIMATE_DESTINATION_COUNTRY>" & sBatchConsigneeCountry  & "</ULTIME_DESTINATION_COUNTRY>" 
		sCommonNode = sCommonNode &	"<DOCUMENTS_ONLY></DOCUMENTS_ONLY>" 
		sCommonNode = sCommonNode &	"<PARTIES_RELATED></PARTIES_RELATED>" 
		sCommonNode = sCommonNode &	"<EXPORT_REASON>" & sBatchExportReason  & "</EXPORT_REASON>" 
		sCommonNode = sCommonNode &	"<AES_TRANSACITON_NUMBER></AES_TRANSACTION_NUMBER>" 
		sCommonNode = sCommonNode &	"<PORT_OF_EXPORT></PORT_OF_EXPORT>" 
		sCommonNode = sCommonNode &	"<CONVEYANCE_CODE>UPS</CONVEYANCE_CODE>" 
		sCommonNode = sCommonNode &	"<WEIGHT_UOM>LBS</WEIGHT_UOM>" 
		sCommonNode = sCommonNode &	"<SED_METHOD>" & sBatchSEDMethod  & "</SED_METHOD>" 
		sCommonNode = sCommonNode &	"<AES_FILING_STATUS>" & sBatchAESFilingStatus  & "</AES_FILING_STATUS>" 
		
	End If

		'Detail line item
		'sBatchLicenseNumber 		= "NLR"
	
	sCommonNode = sCommonNode &	"<PSLR_FORMAT_CODE>" & sBatchPSLRFormat & "</PSLR_FORMAT_CODE>" 
	sCommonNode = sCommonNode &	B_L_Req
	sCommonNode = sCommonNode &	"</COMMON>"	
	
	'Code build Package 1 nodes for Proship if weight found
	If Cnum(sBatchPackage1Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage1Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage1Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage1Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage1BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage1BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		sPackageNode = sPackageNode & "</PACKAGE>"
	End If
	
	'Code build Package 2 nodes for Proship if weight found
	If Cnum(sBatchPackage2Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage2Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage2Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage2Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage2BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage2BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If
	
	'Code build Package 3 nodes for Proship if weight found
	If Cnum(sBatchPackage3Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage3Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage3Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage3Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage3BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage3BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If
	
	'Code build Package 4 nodes for Proship if weight found
	If Cnum(sBatchPackage4Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage4Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage4Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage4Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage4BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage4BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If

	'Code build Package 5 nodes for Proship if weight found
	If Cnum(sBatchPackage5Weight) > 0 Then
		sPackageNode = sPackageNode & "<PACKAGE>"
		sPackageNode = sPackageNode & "<PACKAGING>" & sBatchPackaging & "</PACKAGING>"
		sPackageNode = sPackageNode & "<WEIGHT>" & sBatchPackage5Weight & "</WEIGHT>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_1>" & sBatchPackageID & "</MISC_REFERENCE_1>"
		sPackageNode = sPackageNode & "<MISC_REFERENCE_2>" & sBatchPurchaseOrder & "</MISC_REFERENCE_2>"
		sPackageNode = sPackageNode & "<CSTM_UCC_NUMBER></CSTM_UCC_NUMBER>"
		
		'Code populates box dimensions if found
		If Trim(sBatchPackage5Dimensions) <> "" Then
			sPackageNode = sPackageNode & "<DIMENSION>" & sBatchPackage5Dimensions & "</DIMENSION>"
		Else
			sPackageNode = sPackageNode & "<DIMENSION></DIMENSION>"
		End If
		
		'Code populates box type if found
		If Trim(sBatchPackage5BoxType) <> "" Then
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE>" & sBatchPackage5BoxType & "</CSTM_BOXTYPE>"
		Else
			sPackageNode = sPackageNode & "<CSTM_BOXTYPE></CSTM_BOXTYPE>"
		End If
		
		sPackageNode = sPackageNode & "</PACKAGE>"
		
	End If

	'Code builds CMS nodes for Shipment XML
	sCMSNode = sCMSNode & "<CMS>"
	sCMSNode = sCMSNode & "<CSTM_CUSTOMER_SHIPMETHOD_IN>" & sBatchShipmethodIn   & "</CSTM_CUSTOMER_SHIPMETHOD_IN>" 
	sCMSNode = sCMSNode & "<CSTM_INTERFACE>" & sBatchInterface & "</CSTM_INTERFACE>" 
	sCMSNode = sCMSNode & "<CSTM_SALES_ORDER>" & sBatchInvoiceID  & "</CSTM_SALES_ORDER>" 
	sCMSNode = sCMSNode & "<CSTM_PO_NUMBER>" & sBatchPurchaseOrder  & "</CSTM_PO_NUMBER>" 
	sCMSNode = sCMSNode & "<CSTM_DEPARTMENT>" & sBatchDepartment  & "</CSTM_DEPARTMENT>"
	sCMSNode = sCMSNode & "<CSTM_SHIPPERID>" & sBatchUserID  & "</CSTM_SHIPPERID>"
	sCMSNode = sCMSNode & "<CSTM_USERNAME>" & sBatchUserName  & "</CSTM_USERNAME>"
	sCMSNode = sCMSNode & "<CSTM_WORKSTATIONID>" & sBatchWorkstationID  & "</CSTM_WORKSTATIONID>"
	sCMSNode = sCMSNode & "<CSTM_CUSTOMER_SHIPMETHOD_OUT>" & sBatchShipmethodIn   & "</CSTM_CUSTOMER_SHIPMETHOD_OUT>"
	sCMSNode = sCMSNode & "<CSTM_PACKAGES_PER_SHIPMENT>" & iPackagesPerShipment   & "</CSTM_PACKAGES_PER_SHIPMENT>"
	sCMSNode = sCMSNode & "</CMS>"
					 
	'Build The Shipment XML for Proship server
	sShipmentXML = "<SHIPMENT ACTION=""SHIP"">" & _ 
					sCommonNode & _
					sPackageNode & _
					sCMSNode & _
					"<SERVICE>" & sBatchShipmethod & "</SERVICE>" & _
				   "</SHIPMENT>"
End Function

Function BatchCustomerFindPrinterSetting(sBatchShipmethod, sBatchPSLRFormat, sBatchDestinationPrinter)
	'========================================================================
	' This function reads Proship system XML to find printer settings at station.
	'========================================================================
	
	If Left(Trim(sBatchShipmethod),12) = "BWTI_UPS.UPS" Then
		'Code gets ProShip printer set-up from client station for UPS label 
		sBatchPSLRFormat = "UPS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/STOCK")) & "|" _	  
		    & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_UPS.UPS/UPS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for USPS label
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_USPS.USPS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "USPS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/STOCK")) & "|" _
		    & Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_USPS.USPS/USPS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for Endicia USPS label
	ElseIf Left(Trim(sBatchShipmethod),8) = "ELS.USPS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "USPS_IBI_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_LABEL/DESTINATION"))

			'sBatchPSLRFormat = "USPS_IBI_FLAT|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/PRINTER")) & "|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/STOCK")) & "|" _
			'& Trim(Sys.E("//ACTIVE_DOCUMENTS/ELS.USPS/USPS_IBI_FLAT/DESTINATION"))

			
	'Shipping station label configuration for FedEx Express label	
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_FXRS.FXRS" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.FXRS/FXRS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for FedEx Ground label	
	ElseIf Left(Trim(sBatchShipmethod),14) = "BWTI_FXRS.CAFE" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_FXRS.CAFE/FXRS_LABEL/DESTINATION"))
		
	'Shipping station label configuration for MSI Standard Label	
	ElseIf Trim(sBatchShipmethod) = "BWTI_LTL.LTL.MSISTANDARD" Then
		'Code gets ProShip printer set-up from client station 
		sBatchPSLRFormat = "FXRS_LABEL|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABEL/PRINTER")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/STOCK")) & "|" _
			& Trim(Sys.E("//ACTIVE_DOCUMENTS/BWTI_LTL.LTL/PLPI_CUSTOMER_ADDRESS_LABLE/DESTINATION"))			
	End If

End Function

Function BatchCustomerUpdateBatchInputFileBad(sShipmentXML, sErrorMessage)
	'========================================================================
	' This function reads in a BatchInputfile allows operator to decide how many shipments
	' to process from batchinput File.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	sBatchPackageID	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	
	sQuery = "Update BatchInput Set ProcessedFlag = '2', " & _
			 "ShipmentErrorMessage = '" & sErrorMessage & "' " & _
			 "Where PackageID = '" & sBatchPackageID & "'"

	On Error Resume Next
	Set rsBatchInputUpdate = pCN.Execute(sQuery)
	
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		'Code displays error number and error description if error when reading CSTM(Warehouse) database
		sWindowMessage = "Received Error Updating PackageId  " & UCASE(sBatchPackageID) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
				   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
				   "Shipment " & UCASE(sBatchPackageID) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
				   "Please Report Problem to IT Department"
		sWindowName = "Batch.BatchCustomerUpdateBatchInputFileBad"
		sWindowButtons = vbCritical + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName
	End If
	
	'Code empties record set
	Set rsBatchInputUpdate = Nothing
	
End Function

Function BatchCustomerPrintShippingLabel(sShipmentResponseXML, sShipmentXML, iCurrentPackage)
	'========================================================================
	' This function sends carrier shipping label to destination printer used by operator
	' processing batch.
	'========================================================================
	
	'Code sets variables
	sShippingLabel 				= ""
	iPeriodLocation 			= 0
	sBatchCarrierService		= ""
	sBatchDestinationPrinter	= ""
	sBatchShipmethod 			= GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	sLabelFormatCode			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/PSLR_FORMAT_CODE")
	sPackagingType				= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE/PACKAGING")
	
	'Code removes service level from Proship ship method
	iPeriodLocation = InstrRev(sBatchShipmethod,".")
	sBatchCarrierService = Mid(sBatchShipmethod,1,iPeriodLocation - 1)
	
	'Code splits printer destination from label format code
	Fieldz = Split(sLabelFormatCode,"|")
	sBatchDestinationPrinter = Fieldz(3)
	
	'Get Label Image of each package in shipment from ShipmentResponseXML
	Select Case Trim(sBatchCarrierService)
		Case "BWTI_DHL.DHL"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/DHL_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "BWTI_FXRS.FXRS","BWTI_FXRS.CAFE"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/FXRS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "BWTI_UPS.UPS","BWTI_UPS.MI"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/UPS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
			'Code builds string of fields to add to shipping label
			sLabelEndString			= "^XZ"
			strBoxType = GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/CSTM_BOXTYPE")
			strDatetext = "^FO600,1100^A0N,45,0^FD" & GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE") & "^FS"
			
			'Code adds ship date and box type to button of UPS label if populated
			If strBoxType <> "" Then
				strText = strDatetext & vbCrlf & "^FO350,1150^A0N,51,0^FDDISPLAY : " & strBoxType & "^FS" & vbCrLf & sLabelEndString
				sShippingLabel = Replace(sShippingLabel,sLabelEndString,strText)
			Else
				strText = strDatetext & vbCrlf & sLabelEndString
				sShippingLabel = Replace(sShippingLabel,sLabelEndString,strText)
			End If	

		Case "BWTI_USPS.USPS"
			sShippingLabel = GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_LABEL")
			sShippingLabel = B64_Decode(sShippingLabel)
			
		Case "ELS.USPS"
			If sPackagingType = "PAK" Then
				sShippingLabel= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_IBI_FLAT")
				sShippingLabel = B64_Decode(sShippingLabel)		
			Else
				sShippingLabel= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & CStr(iCurrentPackage) & "]/USPS_IBI_LABEL")
				sShippingLabel = B64_Decode(sShippingLabel)
			End If
	End Select
	
	'Code decides how to send label/document to printer set-up in Proship client
	Select Case UCase(Left(sBatchDestinationPrinter,2))
		Case "WP"
			'Code sends carrier label to windows printer set-up at shipping station
			sError = SendToWinPrinter (Mid(sBatchDestinationPrinter,5,40), sShippingLabel)
			SaveAsfile sError,"C:\errormessage.txt"
			
		Case "\\", "LP", "C:"
			'Code sends carrier label local printer, shared, network printer
			SaveAsFile sShippingLabel,sBatchDestinationPrinter
	End Select

	'Code pauses execution of batch to give printer time to keep up with printing labels.
	Pause 1	
	
End Function

Function BatchCustomerUpdateHistory(iCurrentPackage, sShipmentXML, sShipmentResponseXML)
	'========================================================================
	' This function inserts shipments into CSTM.History table.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	OriginZip 		= ""
	CurrentShipper	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER")
	ProShipCarrier	= GetNodeValue(sShipmentXML, "/SHIPMENT/SERVICE")
	
	
	'Code sets variables for CSTM.History
	sBatchPackageID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	sBatchInvoiceID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_SALES_ORDER")
	sBatchShipperID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER")
	sBatchCustomerID 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CODE")
	sBatchCustomerName 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_COMPANY") 
	sBatchCustomerContact 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CONTACT")
	sBatchCustomerAddress1 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_ADDRESS1")
	sBatchCustomerAddress2 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_ADDRESS2")
	sBatchCustomerAddress3		= ""
	sBatchCustomerCity 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_CITY")
	sBatchCustomerState 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_STATE")
	sBatchCustomerZip 			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_POSTALCODE")
	sBatchCustomerCountry 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_COUNTRY")
	sBatchCustomerPhone 		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_PHONE")
	sBatchOriginCompany			= ""
	sBatchCustomerShipmethodIn 	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_IN")
	sBatchCustomerShipmethodOut	= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_CUSTOMER_SHIPMETHOD_OUT")	
	sBatchOperator				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_SHIPPERID")
	sBatchPSVoidID				= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[1]/PS_VOID_ID")
	sBatchTotalPackages			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PACKAGES_PER_SHIPMENT")
	sBatchResidentialFlag		= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/CONSIGNEE_RESIDENTIAL")
	sBatchZone					= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/ZONE")
	sBatchBilledWeight			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/RATED_WEIGHT")
	sBatchActualWeight			= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/WEIGHT")
	sBatchTrackingNumber		= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/TRACKING_NUMBER")
	sBatchFuelSurcharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/FUEL_SURCHARGE")
	sBatchBaseCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/BASE")
	sBatchTotalCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/TOTAL")
	sBatchSpecialCharge			= GetNodeValue(sShipmentResponseXML, "/SHIPMENT/COMMON/SPECIAL")
	sBatchPONumber				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_PO_NUMBER")
	sBatchDepartment			= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_DEPARTMENT")
	sBatchPackageDimensions		= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/DIMENSION")
	sBatchPackageType			= GetNodeValue(sShipmentXML, "/SHIPMENT/PACKAGE[" & iCurrentPackage & "]/PACKAGING")
	sBatchPaymentTerms			= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/TERMS")
	sBatchInterface				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_INTERFACE")
	sBatchStationID				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/CSTM_WORKSTATIONID")
	sBatchUserText2				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/INVOICE_CODE")
	sBatchUserText3				= GetNodeValue(sShipmentXML, "/SHIPMENT/CMS/SAP_TABLES/DELIVERY_HEAD/SALES_ORGANIZATION")
	
	'Code sets residential flag
	If sBatchResidentialFlag = "True" Then
		sBatchResidentialFlag = "Y"
	Else
		sBatchResidentialFlag = "N"
	End If
	
	'Code calls function that find zip code of shipper
	Call FindOriginZip (CurrentShipper, OriginZip)
	
	'Code calls function to parse out carrier and service from Proship service field.
	Call ParseCarrierAndService (ProShipCarrier, CarrierName, CarrierService)	

	'Code coverts ProShip Carrier FXRS and CAFE to FEDEX in CSTM(History) Table.
	If UCase(Trim(CarrierName)) = "FXRS" _
		Or UCase(Trim(CarrierName)) = "CAFE" Then
		CarrierName = "FEDEX"
	End If
	
	'Code calls function that formats date & time into correct format for ship date
	PackageShipmentDate = CElse(Date(),"yyyy-mm-dd")
	Call FormatShipmentDateTime(PackageShipmentDate, PackageShipmentDateTime)
		
	'Code calls function that formats date & time into correct format for manifest date
	PackageManifestDate = CElse(GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPDATE"),"yyyy-mm-dd")
	Call FormatManifestDateTime(PackageManifestDate, PackageManifestDateTime)
	
	'Code blanks out charge fields on multiple package shipment
	If CNum(iCurrentPackage) > 1 Then
		sBatchBaseCharge 	= "0.00"
		sBatchTotalCharge 	= "0.00"
		sBatchSpecialCharge	= "0.00"
		sBatchFuelSurcharge = "0.00"
	End If
		
	sQuery = "Insert into history set "

	sQuery = sQuery & "PackageId= '" & sBatchPackageID & "', "   'PackageID 
	sQuery = sQuery & "Invoicenumber= '" & sBatchInvoiceID & "', "		'Invoice Number
	sQuery = sQuery & "OriginZip = '" & OriginZip & "', "	
	sQuery = sQuery & "OriginCompany = '" & sBatchOriginCompany & "', "
	sQuery = sQuery & "Shipper = '" & CurrentShipper & "', "	
	sQuery = sQuery & "ConsigneeNumber = '" & sBatchCustomerID & "',"   	
	sQuery = sQuery & "ConsigneeCompany = '" & sBatchCustomerName & "',"  
	sQuery = sQuery & "ConsigneeContact = '" & sBatchCustomerContact & "'," 		
	sQuery = sQuery & "ConsigneeAddress1= '" & sBatchCustomerAddress1 & "',"  
	sQuery = sQuery & "ConsigneeAddress2= '" & sBatchCustomerAddress2 & "'," 
	sQuery = sQuery & "ConsigneeAddress3= '" & sBatchCustomerAddress3 & "',"  
	sQuery = sQuery & "ConsigneeCity = '" & sBatchCustomerCity & "',"   
	sQuery = sQuery & "ConsigneeState = '" & sBatchCustomerState & "',"   
	sQuery = sQuery & "ConsigneeZip = '" & sBatchCustomerZip & "',"   
	sQuery = sQuery & "ConsigneePhone = '" & sBatchCustomerPhone & "',"   
	sQuery = sQuery & "CountryCode = '" & sBatchCustomerCountry  & "', "	
	'sQuery = sQuery & "ConsigneeBillTo = ' ', "  
	sQuery = sQuery & "ProshipCarrier ='" & ProShipCarrier & "', "   
	sQuery = sQuery & "CustomerShipMethodIn = '" & sBatchCustomerShipmethodIn & "', "  
	sQuery = sQuery & "CustomerShipMethodOut ='" & sBatchCustomerShipmethodOut & "', "	
	sQuery = sQuery & "Carrier ='" & CTrim(Carriername,25)  & "', "	
	sQuery = sQuery & "Class ='" & CTrim(CarrierService,30)  & "', "		
	sQuery = sQuery & "Operator =  '" & sBatchOperator & "',"  
	'sQuery = sQuery & "Picker = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PICKER"),20) & "',"   
	'sQuery = sQuery & "Packer = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/CMS/CSTM_PACKER"),20) & "',"  
	sQuery = sQuery & "PSVoidID =  '" & sBatchPSVoidID & "', "
	sQuery = sQuery & "MAXBOX = " & sBatchTotalPackages & ", "
	sQuery = sQuery & "CURBOX =  " & iCurrentPackage & ", "
	sQuery = sQuery & "Residential = '" & sBatchResidentialFlag  & "', "	
	sQuery = sQuery & "Zone = '" & sBatchZone & "', "	
	sQuery = sQuery & "BilledWeight = " & CNum(sBatchBilledWeight) & ", "	
	sQuery = sQuery & "ActualWeight = " & CNum(sBatchActualWeight) & ", "
	sQuery = sQuery & "TrackingNumber = '" & sBatchTrackingNumber & "', " 
	sQuery = sQuery & "ShipDate = '" & PackageShipmentDateTime & "', " 
	sQuery = sQuery & "ManifestDate = '" & PackageManifestDateTime	& "', "	
	sQuery = sQuery & "FuelSurcharge = " & CNum(sBatchFuelSurcharge) & ", " 
	sQuery = sQuery & "BaseCharge = " & CNum(sBatchBaseCharge) & ", "
	'sQuery = sQuery & "CodAmount = " & CNum(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage  & "]/COD_AMOUNT")) & ", " 
	'sQuery = sQuery & "CodFee = " & CNum(GetNodeValue(SR, "/SHIPMENT/COMMON/COD_FEE")) & ", "  
	'sQuery = sQuery & "CODPaymentMethod = '" & CTrim(GetNodeValue(SR, "/SHIPMENT/PACKAGE[" & intPackage & "]/COD_PAYMENT_METHOD"),50) & "', "
	sQuery = sQuery & "TotalCharge  = " & CNum(sBatchTotalCharge) & ", "
	sQuery = sQuery & "Special  = " & CNum(sBatchSpecialCharge) & ", "		
	sQuery = sQuery & "PLDReference1 = '" & sBatchPackageID & "', "	
	sQuery = sQuery & "PLDReference2 = '" & sBatchPONumber & "', "
	sQuery = sQuery & "PONumber = '" & sBatchPONumber & "', " 
					
	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_COMPANY"),40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBCompany = '" & myField & "', "	

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CONTACT"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBContact = '" & myField & "', "	

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS1"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBAddress = '" & myField & "', "		

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_ADDRESS2"), 40)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBAddress2 = '" & myField & "', "					

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_CITY"),25)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBCity = '" & myField & "', "		

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_STATE"), 20)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBState = '" & myField  & "', "			

	REM myField = CTrim(s.e("SHIPMENT/COMMON/TPBILL_POSTALCODE"), 20)
	REM call fixfield(myField)
	REM sQuery = sQuery & "TPBZip = '" & myField & "', "	

	sQuery = sQuery & "Dimensions = '" & sBatchPackageDimensions & "', "
	sQuery = sQuery & "Department = '" & sBatchDepartment & "', "
	sQuery = sQuery & "PackageType = '" & sBatchPackageType & "', "	
	sQuery = sQuery & "PaymentType =  '" & sBatchPaymentTerms & "', "
	sQuery = sQuery & "Interface = '" & sBatchInterface & "', "
	sQuery = sQuery & "UserText1 = '" & sBatchStationID & "', "	
	sQuery = sQuery & "UserText2 = '" & sBatchUserText2 & "', "
	sQuery = sQuery & "UserText3 = '" & sBatchUserText3 & "', "
	sQuery = sQuery & "UserText4 = '', "
	sQuery = sQuery & "UserText5 = '', "
	sQuery = sQuery & "UserNumber1 = '0.00', "
	sQuery = sQuery & "UserNumber2 = '0.00', "
	sQuery = sQuery & "UserNumber3 = '0.00', "
	sQuery = sQuery & "UserNumber4 = '0.00', "
	sQuery = sQuery & "UserNumber5 = '0.00' "
	
	On Error Resume Next
	Set rsHistory = pCN.Execute(sQuery,RecordsAffected)	

	If Err.Number <> 0 Then
		'Code displays error number and error description if error when creating datbase
		strErrorMessage = Err.Number & "  " & Err.Description 
		strWindowName = "Batch.BatchSAPUpdateHistory"
		strWindowButtons = vbCritical + vbOkOnly
		MsgBox strErrorMessage,strWindowButtons,strWindowName
		
	End If	

	'Code empties recordset
	Set rsHistory = Nothing
	
End Function

Function BatchCustomerUpdateBatchInputFileGood(sShipmentXML)
	'========================================================================
	' This function updates CSTM.BatchInputfile that shipments was successful and date 
	' that shipment was processed by batch.
	'========================================================================
	
	'Code sets variables
	sQuery 			= ""
	sBatchPackageID	= GetNodeValue(sShipmentXML, "/SHIPMENT/COMMON/SHIPPER_REFERENCE")
	sProcessed 		= Celse(Now,"yyyy-mm-dd")
					
	sQuery = "Update BatchInput Set ProcessedFlag = 'Y', ProcessedDate = '" & sProcessed & "', " & _
			 "ShipmentErrorMessage = Null " & _
			 "Where PackageID = '" & sBatchPackageID & "'"

	On Error Resume Next
	Set rsBatchInputUpdate = pCN.Execute(sQuery)
	
	If Err.Number <> 0 _
		Or Err.Description <> "" Then
		'Code displays error number and error description if error when reading CSTM(Warehouse) database
		sWindowMessage = "Received Error Updating PackageId  " & UCASE(sBatchPackageID) & " to CSTM.BatchInput Table" & vbCrLf & vbCrlf & _
				   Err.Number & " - " & Err.Description & vbCrlf & vbCrlf & _
				   "Shipment " & UCASE(sBatchPackageID) & " WAS NOT updated in CSTM.BatchInput" & vbCrLF & vbCrlf & _
				   "Please Report Problem to IT Department"
		sWindowName = "Batch.BatchCustomerUpdateBatchInputFileGood"
		sWindowButtons = vbCritical + vbOkOnly
		MsgBox sWindowMessage,sWindowButtons,sWindowName
	End If
	
	'Code empties record-set
	Set rsBatchInputUpdate = Nothing
	
End Function